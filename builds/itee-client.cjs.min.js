"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("itee-utils"),t=require("itee-validators"),s=require("itee-core");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=r(require("uuid/dist/esm-browser/v4"));const n=e.toEnum({Asc:{value:"asc"},Dae:{value:"dae"},Dbf:{value:"dbf"},Fbx:{value:"fbx"},Mtl:{value:"mtl"},Json:{value:"json"},Obj:{value:"obj"},Shp:{value:"shp"},Stl:{value:"stl"}}),o=e.toEnum({Continue:{value:100},SwitchingProtocols:{value:101},Processing:{value:102},Ok:{value:200},Created:{value:201},Accepted:{value:202},NonAuthoritativeInformation:{value:203},NoContent:{value:204},ResetContent:{value:205},PartialContent:{value:206},MultiStatus:{value:207},AlreadyReported:{value:208},ContentDifferent:{value:210},IMUsed:{value:226},MultipleChoices:{value:300},MovedPermanently:{value:301},Found:{value:302},SeeOther:{value:303},NotModified:{value:304},UseProxy:{value:305},Unused:{value:306},TemporaryRedirect:{value:307},PermanentRedirect:{value:308},TooManyRedirects:{value:310},BadRequest:{value:400},Unauthorized:{value:401},PaymentRequired:{value:402},Forbidden:{value:403},NotFound:{value:404},MethodNotAllowed:{value:405},NotAcceptable:{value:406},ProxyAuthenticationRequired:{value:407},RequestTimeOut:{value:408},Conflict:{value:409},Gone:{value:410},LengthRequired:{value:411},PreconditionFailed:{value:412},RequestEntityTooLarge:{value:413},RequestRangeUnsatisfiable:{value:416},ExpectationFailed:{value:417},ImATeapot:{value:418},BadMapping:{value:421},UnprocessableEntity:{value:422},Locked:{value:423},MethodFailure:{value:424},UnorderedCollection:{value:425},UpgradeRequired:{value:426},PreconditionRequired:{value:428},TooManyRequests:{value:429},RequestHeaderFieldsTooLarge:{value:431},NoResponse:{value:444},RetryWith:{value:449},BlockedByWindowsParentalControls:{value:450},UnavailableForLegalReasons:{value:451},UnrecoverableError:{value:456},SSLCertificateError:{value:495},SSLCertificateRequired:{value:496},HTTPRequestSentToHTTPSPort:{value:497},ClientClosedRequest:{value:499},InternalServerError:{value:500},NotImplemented:{value:501},BadGateway:{value:502},ServiceUnavailable:{value:503},GatewayTimeOut:{value:504},HTTPVersionNotSupported:{value:505},VariantAlsoNegotiates:{value:506},InsufficientStorage:{value:507},LoopDetected:{value:508},BandwidthLimitExceeded:{value:509},NotExtended:{value:510},NetworkAuthenticationRequired:{value:511},UnknownError:{value:520},WebServerIsDown:{value:521},ConnectionTimedOut:{value:522},OriginIsUnreachable:{value:523},ATimeoutOccured:{value:524},SSLHandshakeFailed:{value:525},InvalidSSLCertificate:{value:526},RailgunError:{value:527}}),i=e.toEnum({Create:{value:"PUT"},Read:{value:"POST"},Update:{value:"PATCH"},Delete:{value:"DELETE"}}),u=e.toEnum({BACKSPACE:{value:8},TAB:{value:9},ENTER:{value:13},SHIFT:{value:16},CTRL:{value:17},ALT:{value:18},PAUSE:{value:19},CAPS_LOCK:{value:20},ESCAPE:{value:27},SPACE:{value:32},PAGE_UP:{value:33},PAGE_DOWN:{value:34},END:{value:35},HOME:{value:36},LEFT_ARROW:{value:37},UP_ARROW:{value:38},RIGHT_ARROW:{value:39},DOWN_ARROW:{value:40},INSERT:{value:45},DELETE:{value:46},ZERO:{value:48},ONE:{value:49},TWO:{value:50},THREE:{value:51},FOUR:{value:52},FIVE:{value:53},SIX:{value:54},SEVEN:{value:55},HEIGHT:{value:56},NINE:{value:57},A:{value:65},B:{value:66},C:{value:67},D:{value:68},E:{value:69},F:{value:70},G:{value:71},H:{value:72},I:{value:73},J:{value:74},K:{value:75},L:{value:76},M:{value:77},N:{value:78},O:{value:79},P:{value:80},Q:{value:81},R:{value:82},S:{value:83},T:{value:84},U:{value:85},V:{value:86},W:{value:87},X:{value:88},Y:{value:89},Z:{value:90},LEFT_WINDOW_KEY:{value:91},RIGHT_WINDOW_KEY:{value:92},SELECT_KEY:{value:93},NUMPAD_0:{value:96},NUMPAD_1:{value:97},NUMPAD_2:{value:98},NUMPAD_3:{value:99},NUMPAD_4:{value:100},NUMPAD_5:{value:101},NUMPAD_6:{value:102},NUMPAD_7:{value:103},NUMPAD_8:{value:104},NUMPAD_9:{value:105},MULTIPLY:{value:106},ADD:{value:107},SUBSTRACT:{value:109},DECIMAL_POINT:{value:110},DIVIDE:{value:111},F1:{value:112},F2:{value:113},F3:{value:114},F4:{value:115},F5:{value:116},F6:{value:117},F7:{value:118},F8:{value:119},F9:{value:120},F10:{value:121},F11:{value:122},F12:{value:123},NUM_LOCK:{value:144},SCROLL_LOCK:{value:145},SEMICOLON:{value:186},EQUAL:{value:187},COMMA:{value:188},DASH:{value:189},PERIODE:{value:190},SLASH:{value:191},GRAVE_ACCENT:{value:192},OPEN_SQUARE_BRACKET:{value:219},BACKSLASH:{value:220},CLOSE_SQUARE_BRACKET:{value:221},SINGLE_QUOTE:{value:222}}),l=e.toEnum({}),h=e.toEnum({Wheel:{value:-1},Left:{value:0},Middle:{value:1},Right:{value:2}}),d=e.toEnum({ArrayBuffer:{value:"arraybuffer"},Blob:{value:"blob"},Document:{value:"document"},Json:{value:"json"},DOMString:{value:"text"},Default:{value:""}});
/**
 * @class
 * @classdesc TStore is a simple javascript object whose purpose is to store some ket/value data to future usage. It could be enable/disable.
 *
 * @example {@lang javascript}
 * var cache = new TCache()
 * cache.add( 'foo', 'bar' )
 * TLogger.log( cache.get('foo') ) // 'bar'
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
class c{static _validate(e,s){for(let r=0,a=s.length;r<a;r++){let a=s[r];if(!a.validator(e)){const s=a.error;throw t.isString(s)?new TypeError(s):t.isFunction(s)?new TypeError(s(e)):new TypeError(`${e} is invalid.`)}}}constructor(e={}){const t={collection:{},allowOverride:!1,keyValidators:[],valueValidators:[],...e};this.collection=t.collection,this.allowOverride=t.allowOverride,this.keyValidators=t.keyValidators,this.valueValidators=t.valueValidators}get collection(){return this._collection}set collection(e){const s="Expect an object.";if(t.isNull(e))throw new TypeError(`Collection cannot be null ! ${s}`);if(t.isUndefined(e))throw new TypeError(`Collection cannot be undefined ! ${s}`);if(t.isNotObject(e))throw new TypeError(`Collection cannot be an instance of ${e.constructor.name} ! ${s}`);this._collection=e}get allowOverride(){return this._allowOverride}set allowOverride(e){const s="Allow override",r="Expect a boolean.";if(t.isNull(e))throw new TypeError(`${s} cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`${s} cannot be undefined ! ${r}`);if(t.isNotBoolean(e))throw new TypeError(`${s} cannot be an instance of ${e.constructor.name} ! ${r}`);this._allowOverride=e}get keyValidators(){return this._keyValidators}set keyValidators(e){const s="Keys validators",r="Expect an array of TValidator or an empty array.";if(t.isNull(e))throw new TypeError(`${s} cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`${s} cannot be undefined ! ${r}`);if(t.isNotArray(e))throw new TypeError(`${s} cannot be an instance of ${e.constructor.name} ! ${r}`);this._keyValidators=e}get valueValidators(){return this._valueValidators}set valueValidators(e){const s="Values validators",r="Expect an array of TValidator or an empty array.";if(t.isNull(e))throw new TypeError(`${s} cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`${s} cannot be undefined ! ${r}`);if(t.isNotArray(e))throw new TypeError(`${s} cannot be an instance of ${e.constructor.name} ! ${r}`);this._valueValidators=e}get keys(){return Object.keys(this._collection)}get values(){return Object.values(this._collection)}setCollection(e){return this.collection=e,this}setAllowOverride(e){return this.allowOverride=e,this}setKeyValidators(e){return this.keyValidators(e),this}setValueValidators(e){return this.valueValidators(e),this}add(e,t,s=!1){if(this.contain(e)&&!this._allowOverride&&!s)throw new TypeError(`Item with key (${e}) already exist in collection !`);return c._validate(e,this._keyValidators),c._validate(t,this._valueValidators),this._collection[e]=t,this}contain(e){return t.isNotUndefined(this._collection[e])}get(e){return this._collection[e]}remove(e){return delete this._collection[e],this}clear(){return this._collection={},this}}
/**
 * @class
 * @classdesc The abstract class to create factory
 * @abstract
 * @extends TStore
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class p extends c{constructor(e={}){super({...e})}create(e,...t){}}
/**
 * @class
 * @classdesc The TCloningFactory is a kind a factory that performe instanciation by cloning a base instance.
 * @extends TAbstractFactory
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
/**
 * @class
 * @classdesc TKeyboardController allow single source of thruth for keyboard state checking (based on Lee Stemkoski work).
 * See TKeyboardController.k object data below for names of keys whose state can be polled
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 * @example {@lang javascript}
 * // (1) create a global variable:
 * var keyboard = new TKeyboardController();
 *
 * // (2) during main loop:
 * keyboard.update();
 *
 * // (3) check state of keys:
 * keyboard.down("A")    -- true for one update cycle after key is pressed
 * keyboard.pressed("A") -- true as long as key is being pressed
 * keyboard.up("A")      -- true for one update cycle after key is released
 */
class g{static keyName(e){return null!==g.k[e]?g.k[e]:String.fromCharCode(e)}static onKeyUp(e){var t=g.keyName(e.keyCode);g.status[t]&&(g.status[t].pressed=!1)}static onKeyDown(e){var t=g.keyName(e.keyCode);g.status[t]||(g.status[t]={down:!1,pressed:!1,up:!1,updatedPreviously:!1})}constructor(e={}){document.addEventListener("keydown",g.onKeyDown,!1),document.addEventListener("keyup",g.onKeyUp,!1)}update(){for(var e in g.status)g.status[e].updatedPreviously?g.status[e].down=!1:(g.status[e].down=!0,g.status[e].pressed=!0,g.status[e].updatedPreviously=!0),g.status[e].up?delete g.status[e]:g.status[e].pressed||(g.status[e].up=!0)}down(e){return g.status[e]&&g.status[e].down}pressed(e){return g.status[e]&&g.status[e].pressed}up(e){return g.status[e]&&g.status[e].up}debug(){var e="Keys active: ";for(var t in g.status)e+=" "+t;s.DefaultLogger.log(e)}}g.k=u,g.status={};const _=e.toEnum({Little:!0,Big:!1}),f=e.toEnum({One:1,Two:2,Four:4,Height:8});const y=new
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TDataBaseManager
 * @classdesc The base class of database managers. Give the basic interface about database call.
 *
 * @requires {@link HttpVerb}
 * @requires {@link ResponseType}
 * @requires {@link HttpStatusCode}
 * @requires {@link TOrchestrator}
 * @requires {@link TStore}
 *
 * @example Todo
 *
 */
class{constructor(){this._id=0}get id(){return this._id+=1,this._id}},v=e.toEnum({CreateOne:0,CreateMany:1,ReadOne:2,ReadMany:3,ReadWhere:4,ReadAll:5,UpdateOne:6,UpdateMany:7,UpdateWhere:8,UpdateAll:9,DeleteOne:10,DeleteMany:11,DeleteWhere:12,DeleteAll:13});class m{static get requestId(){return m._requestId++,m._requestId}constructor(e={}){const t={basePath:"/",responseType:d.Json,bunchSize:500,requestAggregationTime:200,requestsConcurrency:6,logger:s.DefaultLogger,...e};this.basePath=t.basePath,this.responseType=t.responseType,this.bunchSize=t.bunchSize,this.requestAggregationTime=t.requestAggregationTime,this.requestsConcurrency=t.requestsConcurrency,this.logger=t.logger,this._cache=new c,this._waitingQueue=[],this._aggregateQueue=[],this._requestQueue=[],this._processQueue=[],this._aggregationTimeoutId=null,this._idToRequest=[]}get basePath(){return this._basePath}set basePath(e){if(t.isNull(e))throw new TypeError("Base path cannot be null ! Expect a non empty string.");if(t.isUndefined(e))throw new TypeError("Base path cannot be undefined ! Expect a non empty string.");if(t.isNotString(e))throw new TypeError(`Base path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(t.isEmptyString(e))throw new TypeError("Base path cannot be empty ! Expect a non empty string.");if(t.isBlankString(e))throw new TypeError("Base path cannot contain only whitespace ! Expect a non empty string.");this._basePath=e}get responseType(){return this._responseType}set responseType(e){if(t.isNull(e))throw new Error("TDataBaseManager: responseType cannot be null !");if(t.isNull(e))throw new TypeError("Response type cannot be null ! Expect a non empty string.");if(t.isUndefined(e))throw new TypeError("Response type cannot be undefined ! Expect a non empty string.");this._responseType=e}get bunchSize(){return this._bunchSize}set bunchSize(e){if(t.isNull(e))throw new TypeError("Bunch size cannot be null ! Expect a positive number.");if(t.isUndefined(e))throw new TypeError("Bunch size cannot be undefined ! Expect a positive number.");if(t.isNotNumber(e))throw new TypeError(`Bunch size cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(!t.isNumberPositive(e))throw new TypeError("Bunch size cannot be lower or equal to zero ! Expect a positive number.");this._bunchSize=e}get requestAggregationTime(){return this._requestAggregationTime}set requestAggregationTime(e){if(t.isNull(e))throw new TypeError("Requests aggregation time cannot be null ! Expect a positive number.");if(t.isUndefined(e))throw new TypeError("Requests aggregation time cannot be undefined ! Expect a positive number.");if(t.isNotNumber(e))throw new TypeError(`Requests aggregation time cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(t.isNumberNegative(e))throw new TypeError("Requests aggregation time cannot be lower or equal to zero ! Expect a positive number.");this._requestAggregationTime=e}get requestsConcurrency(){return this._requestsConcurrency}set requestsConcurrency(e){if(t.isNull(e))throw new TypeError("Minimum of simultaneous request cannot be null ! Expect a positive number.");if(t.isUndefined(e))throw new TypeError("Minimum of simultaneous request cannot be undefined ! Expect a positive number.");if(t.isNotNumber(e))throw new TypeError(`Minimum of simultaneous request cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(t.isZero(e)||t.isNumberNegative(e))throw new TypeError("Minimum of simultaneous request cannot be lower or equal to zero ! Expect a positive number.");this._requestsConcurrency=e}get logger(){return this._logger}set logger(e){if(t.isNull(e))throw new TypeError("Progress manager cannot be null ! Expect an instance of TProgressManager.");if(t.isUndefined(e))throw new TypeError("Progress manager cannot be undefined ! Expect an instance of TProgressManager.");if(!(e instanceof s.TLogger))throw new TypeError(`Progress manager cannot be an instance of ${e.constructor.name} ! Expect an instance of TProgressManager.`);this._logger=e}setBasePath(e){return this.basePath=e,this}setResponseType(e){return this.responseType=e,this}setBunchSize(e){return this.bunchSize=e,this}setRequestAggregationTime(e){return this.requestAggregationTime=e,this}setRequestsConcurrency(e){return this.requestsConcurrency=e,this}setLogger(e){return this.logger=e,this}aggregateQueue(){clearTimeout(this._aggregationTimeoutId),this._aggregationTimeoutId=setTimeout((()=>{const e=this._idToRequest;let t=[];for(let s=e.length-1;s>=0;s--)t.push(e.pop()),t.length!==this._bunchSize&&0!==s||(this._requestQueue.push({_id:`readMany_${y.id}`,_timeStart:new Date,_type:v.ReadMany,method:i.Read.value,url:this._basePath,data:{ids:t},responseType:this._responseType}),t=[]);this.processQueue.call(this)}),this._requestAggregationTime)}processQueue(){for(;this._requestQueue.length>0&&this._processQueue.length<this._requestsConcurrency;){const n=this._requestQueue.pop();this._processQueue.push(n);const o=new XMLHttpRequest;o.onloadstart=e.bind(this),o.onload=this._onLoad.bind(this,n,this._onEnd.bind(this,n,n.onLoad),this._onProgress.bind(this,n.onProgress),this._onError.bind(this,n,n.onError)),o.onloadend=t.bind(this),o.onprogress=this._onProgress.bind(this,n.onProgress),o.onreadystatechange=s.bind(this),o.onabort=r.bind(this),o.onerror=this._onError.bind(this,n,n.onError),o.ontimeout=a.bind(this),o.open(n.method,n.url,!0),o.setRequestHeader("Content-Type","application/json"),o.setRequestHeader("Accept","application/json"),o.responseType=n.responseType.value;const i=n.data&&n.responseType===d.Json?JSON.stringify(n.data):n.data;o.send(i)}function e(e){this.logger.progress(e)}function t(e){this.logger.progress(e)}function s(e){this.logger.debug(e)}function r(e){this.logger.error(e)}function a(e){this.logger.error(e)}}create(e,s,r,a){t.isArray(e)&&t.isNotEmptyArray(e)?t.isArrayOfSingleElement(e)?this._createOne(e[0],s,r,a):this._createMany(e,s,r,a):t.isObject(e)&&t.isNotEmptyObject(e)?this._createOne(e,s,r,a):a("TDataBaseManager.create: Invalid data type, expect object or array of objects.")}read(e,s,r,a,n){t.isString(e)&&t.isNotEmptyString(e)&&t.isNotBlankString(e)?this._readOne(e,s,r,a,n):t.isArray(e)&&t.isNotEmptyArray(e)?t.isArrayOfSingleElement(e)?this._readOne(e[0],s,r,a,n):this._readMany(e,s,r,a,n):t.isObject(e)?t.isEmptyObject(e)?this._readAll(s,r,a,n):this._readWhere(e,s,r,a,n):n("TDataBaseManager.read: Invalid data type, expect string, object or array of objects.")}update(e,s,r,a,n){t.isNotDefined(s)?n("TDataBaseManager.update: Update data cannot be null or undefined !"):t.isNotObject(s)?n("TDataBaseManager.update: Invalid update data type. Expect an object."):t.isString(e)&&t.isNotEmptyString(e)&&t.isNotBlankString(e)?this._updateOne(e,s,r,a,n):t.isArray(e)&&t.isNotEmptyArray(e)?t.isArrayOfSingleElement(e)?this._updateOne(e[0],s,r,a,n):this._updateMany(e,s,r,a,n):t.isObject(e)?t.isEmptyObject(e)?this._updateAll(s,r,a,n):this._updateWhere(e,s,r,a,n):n("TDataBaseManager.update: Invalid data type, expect string, object or array of objects.")}delete(e,s,r,a){t.isString(e)&&t.isNotEmptyString(e)&&t.isNotBlankString(e)?this._deleteOne(e,s,r,a):t.isArray(e)&&t.isNotEmptyArray(e)?t.isArrayOfSingleElement(e)?this._deleteOne(e[0],s,r,a):this._deleteMany(e,s,r,a):t.isObject(e)?t.isEmptyObject(e)?this._deleteAll(s,r,a):this._deleteWhere(e,s,r,a):a("TDataBaseManager.delete: Invalid data type, expect null, string, object or array of objects.")}_onLoad(e,t,s,r,a){const n=a.target,i=n.status,u=n.response,l=n.responseType;switch(i){case o.Ok.value:this._dispatchResponse(u,l,t,s,r);break;case o.NonAuthoritativeInformation.value:case o.NoContent.value:case o.ResetContent.value:case o.PartialContent.value:case o.MultiStatus.value:case o.AlreadyReported.value:case o.ContentDifferent.value:case o.IMUsed.value:case o.MultipleChoices.value:case o.MovedPermanently.value:case o.Found.value:case o.SeeOther.value:case o.NotModified.value:case o.UseProxy.value:case o.Unused.value:case o.TemporaryRedirect.value:case o.PermanentRedirect.value:case o.TooManyRedirects.value:case o.BadRequest.value:case o.Unauthorized.value:case o.PaymentRequired.value:case o.Forbidden.value:case o.NotFound.value:case o.MethodNotAllowed.value:case o.NotAcceptable.value:case o.ProxyAuthenticationRequired.value:case o.RequestTimeOut.value:case o.Conflict.value:case o.Gone.value:case o.LengthRequired.value:case o.PreconditionFailed.value:case o.RequestEntityTooLarge.value:case o.RequestRangeUnsatisfiable.value:case o.ExpectationFailed.value:case o.ImATeapot.value:case o.BadMapping.value:case o.UnprocessableEntity.value:case o.Locked.value:case o.MethodFailure.value:case o.UnorderedCollection.value:case o.UpgradeRequired.value:case o.PreconditionRequired.value:case o.TooManyRequests.value:case o.RequestHeaderFieldsTooLarge.value:case o.NoResponse.value:case o.RetryWith.value:case o.BlockedByWindowsParentalControls.value:case o.UnavailableForLegalReasons.value:case o.UnrecoverableError.value:case o.SSLCertificateError.value:case o.SSLCertificateRequired.value:case o.HTTPRequestSentToHTTPSPort.value:case o.ClientClosedRequest.value:case o.InternalServerError.value:case o.NotImplemented.value:case o.BadGateway.value:case o.ServiceUnavailable.value:case o.GatewayTimeOut.value:case o.HTTPVersionNotSupported.value:case o.VariantAlsoNegotiates.value:case o.InsufficientStorage.value:case o.LoopDetected.value:case o.BandwidthLimitExceeded.value:case o.NotExtended.value:case o.NetworkAuthenticationRequired.value:case o.UnknownError.value:case o.WebServerIsDown.value:case o.ConnectionTimedOut.value:case o.OriginIsUnreachable.value:case o.ATimeoutOccured.value:case o.SSLHandshakeFailed.value:case o.InvalidSSLCertificate.value:case o.RailgunError.value:r(u);break;default:throw new RangeError(`Unmanaged HttpStatusCode: ${i}`)}}_onProgress(e,s){t.isDefined(this.logger)?this.logger.progress(s,e):t.isDefined(e)&&e(s)}_onError(e,s,r){this._closeRequest(e),t.isDefined(this.logger)?this.logger.error(r,s):t.isDefined(s)&&s(r)}_onEnd(e,t,s){const r=e._type;switch(r){case v.ReadOne:case v.ReadMany:this._updateCache(s),this._updateWaitingQueue();break;case v.ReadWhere:case v.ReadAll:this._updateCache(s),this._updateWaitingQueue(),t(s);break;case v.CreateOne:case v.CreateMany:case v.UpdateOne:case v.UpdateMany:case v.UpdateWhere:case v.UpdateAll:case v.DeleteOne:case v.DeleteMany:case v.DeleteWhere:case v.DeleteAll:t(s);break;default:throw new RangeError(`Invalid request type: ${r}`)}this._closeRequest(e)}_dispatchResponse(e,t,s,r,a){switch(t){case d.ArrayBuffer.value:this._onArrayBuffer(e,s,r,a);break;case d.Blob.value:this._onBlob(e,s,r,a);break;case d.Json.value:this._onJson(e,s,r,a);break;case d.DOMString.value:case d.Default.value:this._onText(e,s,r,a);break;default:throw new Error(`Unknown response type: ${t}`)}}_closeRequest(e){if(this._processQueue.splice(this._processQueue.indexOf(e),1),Window.Itee&&Window.Itee.Debug){const t=(new Date).valueOf()-e._timeStart.valueOf(),s=`${this.constructor.name} close request [${e._id}] on ${t}ms.Waiting queue: ${this._waitingQueue.length}Request queue: ${this._requestQueue.length}Process queue: ${this._processQueue.length}==========================`;this.logger.debug(s)}this.processQueue()}_retrieveCachedValues(e){let s={},r=[],a=[];for(let n=0,o=e.length;n<o;n++){const o=e[n],i=this._cache.get(o);t.isDefined(i)?s[o]=i:t.isNull(i)?r.push(o):a.push(o)}return{results:s,underRequest:r,toRequest:a}}_updateCache(e){if(t.isNull(e))throw new TypeError("Data cannot be null ! Expect an array of object.");if(t.isUndefined(e))throw new TypeError("Data cannot be undefined ! Expect an array of object.");let s={};if(t.isArray(e))for(let t in e)s[e[t]._id]=e[t];else s=e;for(let[e,r]of Object.entries(s)){const s=this._cache.get(e);t.isNull(s)?this._cache.add(e,r,!0):t.isUndefined(s)?(this.logger.warn("Cache was not pre-allocated with null value."),this._cache.add(e,r)):this.logger.error("Cached value already exist !")}}_updateWaitingQueue(){const e=0===this._requestQueue.length&&0===this._processQueue.length;for(let s=this._waitingQueue.length-1;s>=0;s--){const r=this._waitingQueue[s];for(let e=r.underRequest.length-1;e>=0;e--){const s=r.underRequest[e],a=this._cache.get(s);t.isNotDefined(a)||(r.results[s]=a,r.underRequest.splice(r.underRequest.indexOf(s),1))}const a=0===r.underRequest.length;a?(this._waitingQueue.splice(s,1),r.onLoadCallback(r.results)):!a&&e&&(this.logger.warn("Incomplet demand but empty request/process queue"),this._waitingQueue.splice(s,1),r.onLoadCallback(r.results))}}_onArrayBuffer(e,t,s,r){}_onBlob(e,t,s,r){}_onJson(e,t,s,r){}_onText(e,t,s,r){}_createOne(e,t,s,r){this._requestQueue.push({_id:`createOne_${y.id}`,_timeStart:new Date,_type:v.CreateOne,method:i.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_createMany(e,t,s,r){this._requestQueue.push({_id:`createMany_${y.id}`,_timeStart:new Date,_type:v.CreateMany,method:i.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_readOne(e,t,s,r,a){const n=this._retrieveCachedValues([e]);if(0===n.toRequest.length)0===n.underRequest.length?s(n.results):(n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=a,this._waitingQueue.push(n));else{n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=a,this._waitingQueue.push(n);try{this._cache.add(e,null),n.underRequest.push(e),n.toRequest.splice(n.toRequest.indexOf(e),1)}catch(e){this.logger.error(e)}this._idToRequest.push(e),this.aggregateQueue()}}_readMany(e,t,s,r,a){const n=this._retrieveCachedValues(e);if(0===n.toRequest.length)0===n.underRequest.length?s(n.results):(n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=a,this._waitingQueue.push(n));else{n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=a,this._waitingQueue.push(n);const e=n.toRequest;let t;for(let s=e.length-1;s>=0;s--){t=e[s];try{this._cache.add(t,null),n.underRequest.push(t),n.toRequest.splice(n.toRequest.indexOf(t),1)}catch(e){this.logger.error(e)}this._idToRequest.push(t)}this.aggregateQueue()}}_readWhere(e,t,s,r,a){this._requestQueue.push({_id:`readWhere_${y.id}`,_timeStart:new Date,_type:v.ReadWhere,method:i.Read.value,url:this._basePath,data:{query:e,projection:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_readAll(e,t,s,r){this._requestQueue.push({_id:`readAll_${y.id}`,_timeStart:new Date,_type:v.ReadAll,method:i.Read.value,url:this._basePath,data:{query:{},projection:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_updateOne(e,t,s,r,a){this._requestQueue.push({_id:`updateOne_${y.id}`,_timeStart:new Date,_type:v.UpdateOne,method:i.Update.value,url:`${this._basePath}/${e}`,data:{update:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_updateMany(e,t,s,r,a){this._requestQueue.push({_id:`updateMany_${y.id}`,_timeStart:new Date,_type:v.UpdateMany,method:i.Update.value,url:this._basePath,data:{ids:e,update:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_updateWhere(e,t,s,r,a){this._requestQueue.push({_id:`updateWhere_${y.id}`,_timeStart:new Date,_type:v.UpdateWhere,method:i.Update.value,url:this._basePath,data:{query:e,update:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_updateAll(e,t,s,r){this._requestQueue.push({_id:`updateAll_${y.id}`,_timeStart:new Date,_type:v.UpdateAll,method:i.Update.value,url:this._basePath,data:{query:{},update:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteOne(e,t,s,r){this._requestQueue.push({_id:`deleteOne_${y.id}`,_timeStart:new Date,_type:v.DeleteOne,method:i.Delete.value,url:`${this._basePath}/${e}`,data:null,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteMany(e,t,s,r){this._requestQueue.push({_id:`deleteMany_${y.id}`,_timeStart:new Date,_type:v.DeleteMany,method:i.Delete.value,url:this._basePath,data:{ids:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteWhere(e,t,s,r){this._requestQueue.push({_id:`deleteWhere_${y.id}`,_timeStart:new Date,_type:v.DeleteWhere,method:i.Delete.value,url:this._basePath,data:{query:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteAll(e,t,s){this._requestQueue.push({_id:`deleteAll_${y.id}`,_timeStart:new Date,_type:v.DeleteAll,method:i.Delete.value,url:this._basePath,data:{query:{}},onLoad:e,onProgress:t,onError:s,responseType:this._responseType}),this.processQueue()}}m._requestId=0,m._requests={waitingQueue:{},toProcess:{create:{},read:{},update:{},delete:{}},underProcess:{create:{},read:{},update:{},delete:{}},processed:{create:{},read:{},update:{},delete:{}}};const w=e.toEnum({Number:0,String:1,Uuid:2});class b{static isWebAPIMessage=!0;constructor(e){this._id=a.default(),this.type=e}get id(){return this._id}get type(){return this._type}set type(e){if(t.isNotString(e))throw new ReferenceError("WebAPIMessage type cannot be null or undefined !");if(t.isEmptyString(e))throw new TypeError("WebAPIMessage type cannot be an empty string !");this._type=e}toJSON(){return{id:this.id,type:this.type}}}class E extends b{static isWebAPIMessageData=!0;constructor(e){super("_data"),this.data=e}toJSON(){return{...super.toJSON(),data:JSON.stringify(this.data)}}}class T extends b{static isWebAPIMessageError=!0;constructor(e){super("_error"),this.message=e.message,this.stack=e.stack}toJSON(){return{...super.toJSON(),message:this.message,stack:this.stack}}}class O extends b{static isWebAPIMessageProgress=!0;constructor(e=0,t=0){super("_progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}class A extends b{static isWebAPIMessageReady=!0;constructor(){super("_ready")}}class N extends b{static isWebApiMessageResponse=!0;constructor(e,t){super("_response"),this.request=e,this.result=t}get request(){return this._request}set request(e){t.isNull(e)||t.isUndefined(e)||(this._request=e)}get result(){return this._result}set result(e){this._result=e}toJSON(){return{...super.toJSON(),request:this.request,result:this.result}}}class R{static isWorkerMessage=!0;constructor(e){this.type=e}get type(){return this._type}set type(e){this._type=e}toJSON(){return{type:this.type}}}class M extends R{static isWorkerMessageData=!0;constructor(e,t){super(e),this.buffer=t}toJSON(){return{...super.toJSON(),buffer:this.buffer}}}class S extends R{static isWorkerMessageError=!0;constructor(e){super("error"),this.message=e.message,this.stack=e.stack}toJSON(){return{...super.toJSON(),message:this.message,stack:this.stack}}}class q extends R{static isWorkerMessageProgess=!0;constructor(e=0,t=0){super("progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}exports.AbstractWebAPI=class{constructor(e={}){const t={logger:s.DefaultLogger,allowAnyOrigins:!1,allowedOrigins:[],requestTimeout:2e3,...e};this.logger=t.logger,this._origin=window.location.origin,this._responses=new Map,window.addEventListener("message",this._onMessage.bind(this),!1),this.allowAnyOrigins=t.allowAnyOrigins,this.allowedOrigins=t.allowedOrigins,this.requestTimeout=t.requestTimeout,this._broadCastReadyMessage()}get logger(){return this._logger}set logger(e){if(t.isNull(e))throw new ReferenceError(`[${this._origin}]: The logger cannot be null, expect a TLogger.`);if(t.isUndefined(e))throw new ReferenceError(`[${this._origin}]: The logger cannot be undefined, expect a TLogger.`);if(!e.isLogger)throw new ReferenceError(`[${this._origin}]: The logger cannot be undefined, expect a TLogger.`);this._logger=e}get allowedOrigins(){return this._allowedOrigins}set allowedOrigins(e){this._allowedOrigins=[];const t=Array.isArray(e)?e:[e];for(let e=0,s=t.length;e<s;e++){const s=t[e];this._allowedOrigins.push({id:s.id||`origin_${Math.random().toString().slice(2)}`,uri:s.uri,methods:s.methods,window:this._getOriginWindow(s.uri),messageQueue:[],isReady:!1})}this._broadCastReadyMessage()}get requestTimeout(){return this._requestTimeout}set requestTimeout(e){if(t.isNull(e))throw new ReferenceError(`[${this._origin}]: The request timeout cannot be null, expect to be 0 or a positive number.`);if(t.isUndefined(e))throw new ReferenceError(`[${this._origin}]: The request timeout cannot be undefined, expect to be 0 or a positive number.`);if(t.isNotNumber(e))throw new ReferenceError(`[${this._origin}]: The request timeout expect to be 0 or a positive number.`);if(t.isNumberNegative(e)&&!t.isZero(e))throw new ReferenceError(`[${this._origin}]: The request timeout expect to be 0 or a positive number.`);this._requestTimeout=e}setAllowedOrigins(e){return this.allowedOrigins=e,this}setTargetOrigin(e){return this.targetOrigin=e,this}setRequestTimeout(e){return this.requestTimeout=e,this}_isInIframe(){try{return window.self!==window.top}catch(e){return!0}}_isNotAllowedForAllOrigins(){return!this.allowAnyOrigins}_isNotAllowedOrigin(e){return!this._allowedOrigins.map((e=>e.uri)).includes(e)}_isNotAllowedForAllMethods(e){return-1===e.methods.indexOf("*")}_isNotAllowedMethod(e,t){return-1===e.methods.indexOf(t)}_methodNotExist(e){return t.isNotDefined(this[e])}_getAllowedOriginById(e){return Object.values(this._allowedOrigins).find((t=>t.id===e))}_getAllowedOriginByURI(e){return Object.values(this._allowedOrigins).find((t=>t.uri===e))}_getOriginWindow(e){let s=null;if(this._isInIframe())s=window.parent;else{const r=document.getElementsByTagName("iframe"),a=Array.from(r).find((t=>t.src.includes(e)));t.isNotDefined(a)?(this.logger.warn(`[${this._origin}]: Unable to find iframe for [${e}] URI !`),s=null):s=a.contentWindow}return s}async _onMessage(e){if(this._isNotAllowedForAllOrigins()&&this._isNotAllowedOrigin(e.origin))return void this.logger.warn(`[${this._origin}]: An unallowed origin [${e.origin}] try to access the web api.`);let s=this._getAllowedOriginByURI(e.origin);t.isNotDefined(s)?(s={id:`origin_${Math.random().toString().slice(2)}`,uri:e.origin,methods:["*"],window:e.source,messageQueue:[],isReady:!1},this._allowedOrigins.push(s)):null===s.window&&(s.window=e.source);try{await this._dispatchMessageFrom(s,JSON.parse(e.data))}catch(e){this.postErrorTo(s.id,e)}}async _dispatchMessageFrom(e,s){if(t.isNotDefined(s))throw new ReferenceError(`[${this._origin}]: Message cannot be null or undefined ! Expect a json object.`);const r=s.type;"_ready"===r?(this.logger.log(`[${this._origin}]: Recieve '_ready' message from [${e.uri}].`),this.onReadyFrom(e,s)):"_progress"===r?(this.logger.log(`[${this._origin}]: Recieve '_progress' message from [${e.uri}].`),this.onProgressFrom(e,s)):"_error"===r?(this.logger.log(`[${this._origin}]: Recieve '_error' message from [${e.uri}].`),this.onErrorFrom(e,s)):"_response"===r?(this.logger.log(`[${this._origin}]: Recieve '_response' message from [${e.uri}].`),this.onResponseFrom(e,s)):"_request"===r?(this.logger.log(`[${this._origin}]: Recieve '_request' message from [${e.uri}].`),await this.onRequestFrom(e,s)):(this.logger.log(`[${this._origin}]: Recieve 'custom' message from [${e.uri}].`),this.onMessageFrom(e,s))}onReadyFrom(e,t){if(!e.isReady){e.isReady=!0;const t=new A;this.postMessageTo(e.id,t,!0)}const s=e.messageQueue;for(let t=s.length-1;t>=0;t--)this.postMessageTo(e.id,s.shift())}async onRequestFrom(e,t){const s=t.method;if(this._isNotAllowedForAllMethods(e)&&this._isNotAllowedMethod(e,s))throw new Error(`[${this._origin}]: Origin [${e}] try to access an unallowed method named ${s}.`);if(this._methodNotExist(s))throw new ReferenceError(`[${this._origin}]: Origin [${e.uri}] try to access an unexisting method named "${s}".`);const r=t.parameters;let a;try{const e=await this[s](...r);a=new E(e)}catch(e){a=new T(e)}const n=new N(t,a);this.postMessageTo(e.id,n)}onResponseFrom(e,t){this._responses.set(t.request.id,t)}onProgressFrom(e,t){}onErrorFrom(e,t){}onMessageFrom(e,t){}_broadCastReadyMessage(){const e=new A,s=setInterval((()=>{const r=this.allowedOrigins;r.map((e=>e.isReady)).includes(!1)?Object.values(r).forEach((s=>{s.isReady||s.isUnreachable||(t.isDefined(s.silent)?t.isFalse(s.silent)?this.postMessageTo(s.id,e,!0):s.isReady=!0:this.postMessageTo(s.id,e,!0))})):clearInterval(s)}),1e3)}postErrorTo(e,t){let s=null;s=t.isWebAPIMessageError?t:new T(t),this.postMessageTo(e,s.toJSON())}postProgressTo(e,t){let s=null;s=t.isWebAPIMessageProgress?t:new O(t.loaded,t.total),this.postMessageTo(e,s.toJSON())}postDataTo(e,t){let s=null;s=t.isWebAPIMessageData?t:new E(t),this.postMessageTo(e,s.toJSON())}postRequestTo(e,s){let r=0;return new Promise(((a,n)=>{try{this.postMessageTo(e,s);const o=setInterval((()=>{if(this._responses.has(s.id)){const e=this._responses.get(s.id);this._responses.delete(s.id),clearInterval(o);const r=e.result;t.isDefined(r)?"_error"===r.type?n(r.message):"_data"===r.type?a(r.data):a(r):a()}else r>=this.requestTimeout?(clearInterval(o),n(new Error(`Request timeout for ${JSON.stringify(s)}`))):r+=200}),200)}catch(e){n(e)}}))}postMessageTo(e,s,r=!1){if(t.isNotDefined(e))throw new ReferenceError(`[${this._origin}]: Unable to post message to null or undefined origin id !`);if(t.isNotDefined(s))throw new ReferenceError(`[${this._origin}]: Unable to post null or undefined message !`);const a=this._getAllowedOriginById(e);if(t.isNotDefined(a))throw new ReferenceError(`[${this._origin}]: Unable to retrieved origin with id: ${e}`);try{r||a.isReady?r&&!a.window?(this.logger.error(`[${this._origin}]: Origin "${a.uri}" is unreachable !`),a.isUnreachable=!0,a.messageQueue.push(s)):(this.logger.log(`[${this._origin}]: Send message of type [${s.type}] to  [${a.uri}]`),a.window.postMessage(JSON.stringify(s),a.uri)):(this.logger.warn(`[${this._origin}]: Origin "${a.uri}" is not ready yet !`),a.messageQueue.push(s))}catch(e){this.logger.error(e)}}},exports.AbstractWorker=class{postProgress(e){e.isWorkerMessageProgess?postMessage(e.toJSON()):postMessage(new q(e.loaded,e.total).toJSON())}postError(e){e.isWorkerMessageError?postMessage(e.toJSON()):postMessage(new S(e).toJSON())}postData(e,s){if(t.isArray(s))postMessage(new M(e,s).toJSON(),[...s]);else{if(!t.isArrayBuffer(s))throw new TypeError(`AbstractWorker.postData: Unable to post data of type [${e}].`);postMessage(new M(e,s).toJSON(),[s])}}onMessage(e){if(t.isNotDefined(e))return this.postError(new Error("Message event cannot be null or undefined !")),!0;const s=e.data;if(t.isNotDefined(s))return this.postError(new Error("Message data cannot be null or undefined !")),!0;const r=s.type;if(t.isNotDefined(r))return this.postError(new Error("Message data type cannot be null or undefined !")),!0;if("methodCall"===s.type){const e=s.method;if(t.isNotDefined(e))return this.postError(new Error('Message of type "methodCall" cannot have null, undefined or empty name !')),!0;if(t.isNotString(e))return this.postError(new Error('Message of type "methodCall" expect name to be a string !')),!0;if(t.isEmptyString(e))return this.postError(new Error('Message of type "methodCall" expect name to be a non empty string !')),!0;const r=s.parameters||[];return t.isNotArray(r)?(this.postError(new Error('Message of type "methodCall" expect parameters to be an array !')),!0):(this._invoke(e,r),!0)}}_invoke(e,t=[]){try{const s=this[e](...t);s&&postMessage({type:e,result:s})}catch(e){this.postError(e)}}},exports.Byte=f,exports.Endianness=_,exports.FileFormat=n,exports.HttpStatusCode=o,exports.HttpVerb=i,exports.Keys=u,exports.MimeType=l,exports.Mouse=h,exports.ResponseType=d,exports.TAbstractFactory=p,exports.TBinaryReader=
/**
 * @class
 * @classdesc TBinaryReader is design to perform fast binary read/write
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
class{constructor(e={}){const t={buffer:new ArrayBuffer(0),offset:0,length:0,endianness:_.Little,...e};this.buffer=t.buffer,this.offset=t.offset,this.length=t.length,this.endianness=t.endianness,this._updateDataView()}get buffer(){return this._buffer}set buffer(e){const s="Expect an instance of ArrayBuffer.";if(t.isNull(e))throw new TypeError(`Buffer cannot be null ! ${s}`);if(t.isUndefined(e))throw new TypeError(`Buffer cannot be undefined ! ${s}`);if(t.isNotArrayBuffer(e))throw new TypeError(`Buffer cannot be an instance of ${e.constructor.name} ! ${s}`);this._buffer=e,this._offset=0,this._length=e.byteLength,this._updateDataView()}get offset(){return this._offset}set offset(e){const s="Expect a number.";if(t.isNull(e))throw new TypeError(`Offset cannot be null ! ${s}`);if(t.isUndefined(e))throw new TypeError(`Offset cannot be undefined ! ${s}`);if(t.isNotNumber(e))throw new TypeError(`Offset cannot be an instance of ${e.constructor.name} ! ${s}`);this._offset=e,this._updateDataView()}get length(){return this._length}set length(e){const s="Expect a number.";if(t.isNull(e))throw new TypeError(`Length cannot be null ! ${s}`);if(t.isUndefined(e))throw new TypeError(`Length cannot be undefined ! ${s}`);if(t.isNotNumber(e))throw new TypeError(`Length cannot be an instance of ${e.constructor.name} ! ${s}`);this._length=e,this._updateDataView()}get endianness(){return this._endianness}set endianness(e){const s="Expect a boolean.";if(t.isNull(e))throw new TypeError(`Endianness cannot be null ! ${s}`);if(t.isUndefined(e))throw new TypeError(`Endianness cannot be undefined ! ${s}`);if(t.isNotBoolean(e))throw new TypeError(`Endianness cannot be an instance of ${e.constructor.name} ! ${s}`);this._endianness=e}setBuffer(e,t,s){return this.buffer=e,this.offset=t||0,this.length=s||e.byteLength,this}setOffset(e){return this.offset=e,this}setLength(e){return this.length=e,this}setEndianess(e){return this.endianness=e,this}_getAndUpdateOffsetBy(e){const t=this._offset;return this._offset+=e,t}_updateDataView(){this._dataView=new DataView(this._buffer,this._offset,this._length)}isEndOfFile(){return this._offset===this._length}skipOffsetTo(e){return this._offset=e,this}skipOffsetOf(e){return this._offset+=e,this}getBoolean(){return 1==(1&this.getUint8())}getBooleanArray(e){const t=[];for(let s=0;s<e;s++)t.push(this.getBoolean());return t}getInt8(){return this._dataView.getInt8(this._getAndUpdateOffsetBy(f.One))}getInt8Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt8());return t}getUint8(){return this._dataView.getUint8(this._getAndUpdateOffsetBy(f.One))}getUint8Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint8());return t}getInt16(){return this._dataView.getInt16(this._getAndUpdateOffsetBy(f.Two),this._endianness)}getInt16Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt16());return t}getUint16(){return this._dataView.getUint16(this._getAndUpdateOffsetBy(f.Two),this._endianness)}getUint16Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint16());return t}getInt32(){return this._dataView.getInt32(this._getAndUpdateOffsetBy(f.Four),this._endianness)}getInt32Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt32());return t}getUint32(){return this._dataView.getUint32(this._getAndUpdateOffsetBy(f.Four),this._endianness)}getUint32Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint32());return t}getInt64(){let e=null,t=null;return this._endianness===_.Little?(e=this.getUint32(),t=this.getUint32()):(t=this.getUint32(),e=this.getUint32()),2147483648&t?(t=4294967295&~t,e=4294967295&~e,4294967295===e&&(t=t+1&4294967295),e=e+1&4294967295,-(4294967296*t+e)):4294967296*t+e}getInt64Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt64());return t}getUint64(){let e=null,t=null;return this._endianness===_.Little?(e=this.getUint32(),t=this.getUint32()):(t=this.getUint32(),e=this.getUint32()),4294967296*t+e}getUint64Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint64());return t}getFloat32(){return this._dataView.getFloat32(this._getAndUpdateOffsetBy(f.Four),this._endianness)}getFloat32Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getFloat32());return t}getFloat64(){return this._dataView.getFloat64(this._getAndUpdateOffsetBy(f.Height),this._endianness)}getFloat64Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getFloat64());return t}getChar(){return String.fromCharCode(this.getUint8())}getString(e,t=!0){let s="",r=null;for(let t=0;t<e;t++)r=this.getUint8(),0!==r&&(s+=String.fromCharCode(r));return t&&(s=s.trim()),s}getArrayBuffer(e){const t=this._getAndUpdateOffsetBy(e);return this._dataView.buffer.slice(t,t+e)}},exports.TCloningFactory=class extends p{constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),this.get(e).clone(...t)}}
/**
 * @class
 * @classdesc The TInstancingFactory is a kind a factory that performe instanciation based on registred constructor.
 * @extends TAbstractFactory
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */,exports.TDataBaseManager=m,exports.TIdFactory=class{constructor(e=w.Number,t=null){this.type=e,this.base=t,this._counter=0}get type(){return this._type}set type(e){if(t.isNull(e))throw new Error(`Type cannot be null ! Expect an value from TIdFactoryType enum: ${w.types()}`);if(t.isUndefined(e))throw new Error(`Type cannot be undefined ! Expect an value from TIdFactoryType enum: ${w.types()}`);if(!w.includes(e))throw new Error(`Invalide type ! Expect an value from TIdFactoryType enum: ${w.types()}`);this._type=e}get base(){return this._base}set base(e){if(t.isUndefined(e))throw new Error("Base cannot be undefined ! Expect an instance of Object3D.");if(this._type===w.Number&&t.isNotNumber(e))throw new Error("Invalide Base ! It does not match the type.");if(this._type===w.String&&t.isNotString(e))throw new Error("Invalide Base ! It does not match the type.");this._base=e}setType(e){return this.type=e,this}setBase(e){return this.base=e,this}createId(){return this._base+this._counter++}},exports.TIdFactoryType=w,exports.TInstancingFactory=class extends p{constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),new this.get(e)(...t)}},exports.TKeyboardController=g,exports.TMouseController=
/**
 * @class
 * @classdesc TMouseController allow single source of thruth for mouse state checking
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 * @example
 * (1) create a global variable:
 *      var keyboard = new TKeyboardController();
 * (2) during main loop:
 *       keyboard.update();
 * (3) check state of keys:
 *       keyboard.down("A")    -- true for one update cycle after key is pressed
 *       keyboard.pressed("A") -- true as long as key is being pressed
 *       keyboard.up("A")      -- true for one update cycle after key is released
 *
 *  See TKeyboardController.k object data below for names of keys whose state can be polled
 */
class{constructor(){}},exports.TStore=c,exports.WebAPIMessage=b,exports.WebAPIMessageData=E,exports.WebAPIMessageError=T,exports.WebAPIMessageProgress=O,exports.WebAPIMessageReady=A,exports.WebAPIMessageRequest=class extends b{static isWebAPIMessageRequest=!0;constructor(e,t=[]){super("_request"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){t.isNull(e)||t.isUndefined(e)||t.isNotString(e)||(this._method=e)}get parameters(){return this._parameters}set parameters(e){t.isNotArray(e)||(this._parameters=e)}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}},exports.WebApiMessageResponse=N,exports.WorkerMessage=R,exports.WorkerMessageData=M,exports.WorkerMessageError=S,exports.WorkerMessageMethodCall=class extends R{static isWorkerMessageMethodCall=!0;constructor(e,t=[]){super("methodCall"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){t.isNull(e)||t.isUndefined(e)||t.isNotString(e)||(this._method=e)}get parameters(){return this._parameters}set parameters(e){t.isNotArray(e)||(this._parameters=e)}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}},exports.WorkerProgessMessage=q;
