import{toEnum as e,toArray as t}from"itee-utils";import{isString as s,isFunction as r,isNull as i,isUndefined as a,isNotObject as o,isNotBoolean as n,isNotArray as u,isNotUndefined as l,isNotArrayBuffer as h,isNotNumber as d,isNotString as c,isEmptyString as g,isBlankString as p,isNumberPositive as f,isNumberNegative as _,isZero as y,isArray as w,isNotEmptyArray as v,isArrayOfSingleElement as m,isObject as b,isNotEmptyObject as E,isNotEmptyString as T,isNotBlankString as O,isEmptyObject as R,isNotDefined as A,isDefined as M,isEmptyArray as q,isArrayBuffer as U}from"itee-validators";import{DefaultLogger as S,TLogger as B}from"itee-core";const $=e({Asc:{value:"asc"},Dae:{value:"dae"},Dbf:{value:"dbf"},Fbx:{value:"fbx"},Mtl:{value:"mtl"},Json:{value:"json"},Obj:{value:"obj"},Shp:{value:"shp"},Stl:{value:"stl"}}),P=e({Continue:{value:100},SwitchingProtocols:{value:101},Processing:{value:102},Ok:{value:200},Created:{value:201},Accepted:{value:202},NonAuthoritativeInformation:{value:203},NoContent:{value:204},ResetContent:{value:205},PartialContent:{value:206},MultiStatus:{value:207},AlreadyReported:{value:208},ContentDifferent:{value:210},IMUsed:{value:226},MultipleChoices:{value:300},MovedPermanently:{value:301},Found:{value:302},SeeOther:{value:303},NotModified:{value:304},UseProxy:{value:305},Unused:{value:306},TemporaryRedirect:{value:307},PermanentRedirect:{value:308},TooManyRedirects:{value:310},BadRequest:{value:400},Unauthorized:{value:401},PaymentRequired:{value:402},Forbidden:{value:403},NotFound:{value:404},MethodNotAllowed:{value:405},NotAcceptable:{value:406},ProxyAuthenticationRequired:{value:407},RequestTimeOut:{value:408},Conflict:{value:409},Gone:{value:410},LengthRequired:{value:411},PreconditionFailed:{value:412},RequestEntityTooLarge:{value:413},RequestRangeUnsatisfiable:{value:416},ExpectationFailed:{value:417},ImATeapot:{value:418},BadMapping:{value:421},UnprocessableEntity:{value:422},Locked:{value:423},MethodFailure:{value:424},UnorderedCollection:{value:425},UpgradeRequired:{value:426},PreconditionRequired:{value:428},TooManyRequests:{value:429},RequestHeaderFieldsTooLarge:{value:431},NoResponse:{value:444},RetryWith:{value:449},BlockedByWindowsParentalControls:{value:450},UnavailableForLegalReasons:{value:451},UnrecoverableError:{value:456},SSLCertificateError:{value:495},SSLCertificateRequired:{value:496},HTTPRequestSentToHTTPSPort:{value:497},ClientClosedRequest:{value:499},InternalServerError:{value:500},NotImplemented:{value:501},BadGateway:{value:502},ServiceUnavailable:{value:503},GatewayTimeOut:{value:504},HTTPVersionNotSupported:{value:505},VariantAlsoNegotiates:{value:506},InsufficientStorage:{value:507},LoopDetected:{value:508},BandwidthLimitExceeded:{value:509},NotExtended:{value:510},NetworkAuthenticationRequired:{value:511},UnknownError:{value:520},WebServerIsDown:{value:521},ConnectionTimedOut:{value:522},OriginIsUnreachable:{value:523},ATimeoutOccured:{value:524},SSLHandshakeFailed:{value:525},InvalidSSLCertificate:{value:526},RailgunError:{value:527}}),C=e({Create:{value:"PUT"},Read:{value:"POST"},Update:{value:"PATCH"},Delete:{value:"DELETE"}}),N=e({BACKSPACE:{value:8},TAB:{value:9},ENTER:{value:13},SHIFT:{value:16},CTRL:{value:17},ALT:{value:18},PAUSE:{value:19},CAPS_LOCK:{value:20},ESCAPE:{value:27},SPACE:{value:32},PAGE_UP:{value:33},PAGE_DOWN:{value:34},END:{value:35},HOME:{value:36},LEFT_ARROW:{value:37},UP_ARROW:{value:38},RIGHT_ARROW:{value:39},DOWN_ARROW:{value:40},INSERT:{value:45},DELETE:{value:46},ZERO:{value:48},ONE:{value:49},TWO:{value:50},THREE:{value:51},FOUR:{value:52},FIVE:{value:53},SIX:{value:54},SEVEN:{value:55},HEIGHT:{value:56},NINE:{value:57},A:{value:65},B:{value:66},C:{value:67},D:{value:68},E:{value:69},F:{value:70},G:{value:71},H:{value:72},I:{value:73},J:{value:74},K:{value:75},L:{value:76},M:{value:77},N:{value:78},O:{value:79},P:{value:80},Q:{value:81},R:{value:82},S:{value:83},T:{value:84},U:{value:85},V:{value:86},W:{value:87},X:{value:88},Y:{value:89},Z:{value:90},LEFT_WINDOW_KEY:{value:91},RIGHT_WINDOW_KEY:{value:92},SELECT_KEY:{value:93},NUMPAD_0:{value:96},NUMPAD_1:{value:97},NUMPAD_2:{value:98},NUMPAD_3:{value:99},NUMPAD_4:{value:100},NUMPAD_5:{value:101},NUMPAD_6:{value:102},NUMPAD_7:{value:103},NUMPAD_8:{value:104},NUMPAD_9:{value:105},MULTIPLY:{value:106},ADD:{value:107},SUBSTRACT:{value:109},DECIMAL_POINT:{value:110},DIVIDE:{value:111},F1:{value:112},F2:{value:113},F3:{value:114},F4:{value:115},F5:{value:116},F6:{value:117},F7:{value:118},F8:{value:119},F9:{value:120},F10:{value:121},F11:{value:122},F12:{value:123},NUM_LOCK:{value:144},SCROLL_LOCK:{value:145},SEMICOLON:{value:186},EQUAL:{value:187},COMMA:{value:188},DASH:{value:189},PERIODE:{value:190},SLASH:{value:191},GRAVE_ACCENT:{value:192},OPEN_SQUARE_BRACKET:{value:219},BACKSLASH:{value:220},CLOSE_SQUARE_BRACKET:{value:221},SINGLE_QUOTE:{value:222}}),I=e({}),x=e({Wheel:{value:-1},Left:{value:0},Middle:{value:1},Right:{value:2}}),k=e({ArrayBuffer:{value:"arraybuffer"},Blob:{value:"blob"},Document:{value:"document"},Json:{value:"json"},DOMString:{value:"text"},Default:{value:""}});
/**
 * @class
 * @classdesc TStore is a simple javascript object whose purpose is to store some ket/value data to future usage. It could be enable/disable.
 *
 * @example {@lang javascript}
 * var cache = new TCache()
 * cache.add( 'foo', 'bar' )
 * TLogger.log( cache.get('foo') ) // 'bar'
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
class D{static _validate(e,t){for(let i=0,a=t.length;i<a;i++){let a=t[i];if(!a.validator(e)){const t=a.error;throw s(t)?new TypeError(t):r(t)?new TypeError(t(e)):new TypeError(`${e} is invalid.`)}}}constructor(e={}){const t={collection:{},allowOverride:!1,keyValidators:[],valueValidators:[],...e};this.collection=t.collection,this.allowOverride=t.allowOverride,this.keyValidators=t.keyValidators,this.valueValidators=t.valueValidators}get collection(){return this._collection}set collection(e){const t="Expect an object.";if(i(e))throw new TypeError(`Collection cannot be null ! ${t}`);if(a(e))throw new TypeError(`Collection cannot be undefined ! ${t}`);if(o(e))throw new TypeError(`Collection cannot be an instance of ${e.constructor.name} ! ${t}`);this._collection=e}get allowOverride(){return this._allowOverride}set allowOverride(e){const t="Allow override",s="Expect a boolean.";if(i(e))throw new TypeError(`${t} cannot be null ! ${s}`);if(a(e))throw new TypeError(`${t} cannot be undefined ! ${s}`);if(n(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${s}`);this._allowOverride=e}get keyValidators(){return this._keyValidators}set keyValidators(e){const t="Keys validators",s="Expect an array of TValidator or an empty array.";if(i(e))throw new TypeError(`${t} cannot be null ! ${s}`);if(a(e))throw new TypeError(`${t} cannot be undefined ! ${s}`);if(u(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${s}`);this._keyValidators=e}get valueValidators(){return this._valueValidators}set valueValidators(e){const t="Values validators",s="Expect an array of TValidator or an empty array.";if(i(e))throw new TypeError(`${t} cannot be null ! ${s}`);if(a(e))throw new TypeError(`${t} cannot be undefined ! ${s}`);if(u(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${s}`);this._valueValidators=e}get keys(){return Object.keys(this._collection)}get values(){return Object.values(this._collection)}setCollection(e){return this.collection=e,this}setAllowOverride(e){return this.allowOverride=e,this}setKeyValidators(e){return this.keyValidators(e),this}setValueValidators(e){return this.valueValidators(e),this}add(e,t,s=!1){if(this.contain(e)&&!this._allowOverride&&!s)throw new TypeError(`Item with key (${e}) already exist in collection !`);return D._validate(e,this._keyValidators),D._validate(t,this._valueValidators),this._collection[e]=t,this}contain(e){return l(this._collection[e])}get(e){return this._collection[e]}remove(e){return delete this._collection[e],this}clear(){return this._collection={},this}}
/**
 * @class
 * @classdesc The abstract class to create factory
 * @abstract
 * @extends TStore
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class L extends D{constructor(e={}){super({...e})}create(e,...t){}}
/**
 * @class
 * @classdesc The TCloningFactory is a kind a factory that performe instanciation by cloning a base instance.
 * @extends TAbstractFactory
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class W extends L{constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),this.get(e).clone(...t)}}
/**
 * @class
 * @classdesc The TInstancingFactory is a kind a factory that performe instanciation based on registred constructor.
 * @extends TAbstractFactory
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class F extends L{constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),new this.get(e)(...t)}}
/**
 * @class
 * @classdesc TKeyboardController allow single source of thruth for keyboard state checking (based on Lee Stemkoski work).
 * See TKeyboardController.k object data below for names of keys whose state can be polled
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 * @example {@lang javascript}
 * // (1) create a global variable:
 * var keyboard = new TKeyboardController();
 *
 * // (2) during main loop:
 * keyboard.update();
 *
 * // (3) check state of keys:
 * keyboard.down("A")    -- true for one update cycle after key is pressed
 * keyboard.pressed("A") -- true as long as key is being pressed
 * keyboard.up("A")      -- true for one update cycle after key is released
 */class Q{static keyName(e){return null!==Q.k[e]?Q.k[e]:String.fromCharCode(e)}static onKeyUp(e){var t=Q.keyName(e.keyCode);Q.status[t]&&(Q.status[t].pressed=!1)}static onKeyDown(e){var t=Q.keyName(e.keyCode);Q.status[t]||(Q.status[t]={down:!1,pressed:!1,up:!1,updatedPreviously:!1})}constructor(e={}){document.addEventListener("keydown",Q.onKeyDown,!1),document.addEventListener("keyup",Q.onKeyUp,!1)}update(){for(var e in Q.status)Q.status[e].updatedPreviously?Q.status[e].down=!1:(Q.status[e].down=!0,Q.status[e].pressed=!0,Q.status[e].updatedPreviously=!0),Q.status[e].up?delete Q.status[e]:Q.status[e].pressed||(Q.status[e].up=!0)}down(e){return Q.status[e]&&Q.status[e].down}pressed(e){return Q.status[e]&&Q.status[e].pressed}up(e){return Q.status[e]&&Q.status[e].up}debug(){var e="Keys active: ";for(var t in Q.status)e+=" "+t;S.log(e)}}Q.k=N,Q.status={};
/**
 * @class
 * @classdesc TMouseController allow single source of thruth for mouse state checking
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 * @example
 * (1) create a global variable:
 *      var keyboard = new TKeyboardController();
 * (2) during main loop:
 *       keyboard.update();
 * (3) check state of keys:
 *       keyboard.down("A")    -- true for one update cycle after key is pressed
 *       keyboard.pressed("A") -- true as long as key is being pressed
 *       keyboard.up("A")      -- true for one update cycle after key is released
 *
 *  See TKeyboardController.k object data below for names of keys whose state can be polled
 */
class V{constructor(){}}const J=e({Little:!0,Big:!1}),j=e({One:1,Two:2,Four:4,Eight:8});
/**
 * @class
 * @classdesc TBinaryReader is design to perform fast binary read/write
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
class H{constructor(e={}){const t={buffer:new ArrayBuffer(0),offset:0,length:0,endianness:J.Little,...e};this.buffer=t.buffer,this.endianness=t.endianness,this._bits={buffer:null,offset:null,length:null},this._updateDataView()}get buffer(){return this._buffer}set buffer(e){const t="Expect an instance of ArrayBuffer.";if(i(e))throw new TypeError(`Buffer cannot be null ! ${t}`);if(a(e))throw new TypeError(`Buffer cannot be undefined ! ${t}`);if(h(e))throw new TypeError(`Buffer cannot be an instance of ${e.constructor.name} ! ${t}`);this._buffer=e,this._offset=0,this._length=e.byteLength,this._updateDataView()}get offset(){return this._offset}set offset(e){const t="Expect a number.";if(i(e))throw new TypeError(`Offset cannot be null ! ${t}`);if(a(e))throw new TypeError(`Offset cannot be undefined ! ${t}`);if(d(e))throw new TypeError(`Offset cannot be an instance of ${e.constructor.name} ! ${t}`);this._offset=e,this._updateDataView()}get length(){return this._length}set length(e){const t="Expect a number.";if(i(e))throw new TypeError(`Length cannot be null ! ${t}`);if(a(e))throw new TypeError(`Length cannot be undefined ! ${t}`);if(d(e))throw new TypeError(`Length cannot be an instance of ${e.constructor.name} ! ${t}`);this._length=e,this._updateDataView()}get endianness(){return this._endianness}set endianness(e){const t="Expect a boolean.";if(i(e))throw new TypeError(`Endianness cannot be null ! ${t}`);if(a(e))throw new TypeError(`Endianness cannot be undefined ! ${t}`);if(n(e))throw new TypeError(`Endianness cannot be an instance of ${e.constructor.name} ! ${t}`);this._endianness=e}setBuffer(e,t,s){return this.buffer=e,this.offset=t||0,this.length=s||e.byteLength,this}setOffset(e){return this.offset=e,this}setLength(e){return this.length=e,this}setEndianess(e){return this.endianness=e,this}_getAndUpdateOffsetBy(e){const t=this._offset;return this._offset+=e,t}_updateDataView(){this._dataView=new DataView(this._buffer,this._offset,this._length)}isEndOfFile(){return this._offset===this._length}_isNullBitBuffer(){return null===this._bits.buffer}_nextBit(){this._bits.offset+=1}_isEndOfBitBuffer(){return this._bits.offset===this._bits.length}_isOutOfRangeBitOffset(e){return e>this._bits.length}_getBitAt(e){return 0==(this._bits.buffer&1<<e)?0:1}_resetBits(){this._bits.buffer=null,this._bits.length=0,this._bits.offset=0}skipBitOffsetTo(e){if(this._isOutOfRangeBitOffset(e))throw new RangeError("Bit offset is out of range of the current bits field.");this._bits.offset=e,this._isEndOfBitBuffer()&&this._resetBits()}skipBitOffsetOf(e){this.skipBitOffsetTo(this._bits.offset+e)}getBit8(e=!0){this._isNullBitBuffer()&&(this._bits.buffer=this.getUint8(),this._bits.length=8,this._bits.offset=0);const t=this._getBitAt(this._bits.offset);return e&&(this._nextBit(),this._isEndOfBitBuffer()&&this._resetBits()),t}getBits8(e,t=!0){const s=this._bits.offset;let r=0;for(let s=0;s<e;s++)r|=s===e-1?this.getBit8(t)<<s:this.getBit8()<<s;return t||this.skipBitOffsetTo(s),r}getBit16(e=!0){(this._isNullBitBuffer()||this._isEndOfBitBuffer())&&(this._bits.buffer=this.getUint16(),this._bits.length=16,this._bits.offset=0);const t=this._getBitAt(this._bits.offset);return e&&(this._nextBit(),this._isEndOfBitBuffer()&&this._resetBits()),t}getBits16(e,t=!0){const s=this._bits.offset;let r=0;for(let s=0;s<e;s++)r|=s===e-1?this.getBit16(t)<<s:this.getBit16()<<s;return t||this.skipBitOffsetTo(s),r}getBit32(e=!0){(this._isNullBitBuffer()||this._isEndOfBitBuffer())&&(this._bits.buffer=this.getUint32(),this._bits.length=32,this._bits.offset=0);const t=this._getBitAt(this._bits.offset);return e&&(this._nextBit(),this._isEndOfBitBuffer()&&this._resetBits()),t}getBits32(e,t=!0){const s=this._bits.offset;let r=0;for(let s=0;s<e;s++)r|=s===e-1?this.getBit32(t)<<s:this.getBit32()<<s;return t||this.skipBitOffsetTo(s),r}skipOffsetTo(e){this._offset=e}skipOffsetOf(e){this._offset+=e}getBoolean(e=!0){return 1==(1&this.getUint8(e))}getBooleanArray(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getBoolean());return t||(this._offset=s),r}getInt8(e=!0){const t=e?this._getAndUpdateOffsetBy(j.One):this._offset;return this._dataView.getInt8(t)}getInt8Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt8());return t||(this._offset=s),r}getUint8(e=!0){const t=e?this._getAndUpdateOffsetBy(j.One):this._offset;return this._dataView.getUint8(t)}getUint8Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint8());return t||(this._offset=s),r}getInt16(e=!0){const t=e?this._getAndUpdateOffsetBy(j.Two):this._offset;return this._dataView.getInt16(t,this._endianness)}getInt16Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt16());return t||(this._offset=s),r}getUint16(e=!0){const t=e?this._getAndUpdateOffsetBy(j.Two):this._offset;return this._dataView.getUint16(t,this._endianness)}getUint16Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint16());return t||(this._offset=s),r}getInt32(e=!0){const t=e?this._getAndUpdateOffsetBy(j.Four):this._offset;return this._dataView.getInt32(t,this._endianness)}getInt32Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt32());return t||(this._offset=s),r}getUint32(e=!0){const t=e?this._getAndUpdateOffsetBy(j.Four):this._offset;return this._dataView.getUint32(t,this._endianness)}getUint32Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint32());return t||(this._offset=s),r}getInt64(e=!0){let t=null,s=null;if(this._endianness===J.Little)if(e)t=this.getUint32(),s=this.getUint32();else{const e=this._offset;t=this.getUint32(),s=this.getUint32(),this.skipOffsetTo(e)}else if(e)s=this.getUint32(),t=this.getUint32();else{const e=this._offset;s=this.getUint32(),t=this.getUint32(),this.skipOffsetTo(e)}return 2147483648&s?(s=4294967295&~s,t=4294967295&~t,4294967295===t&&(s=s+1&4294967295),t=t+1&4294967295,-(4294967296*s+t)):4294967296*s+t}getInt64Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt64());return t||(this._offset=s),r}getUint64(e=!0){let t=null,s=null;if(this._endianness===J.Little)if(e)t=this.getUint32(),s=this.getUint32();else{const e=this._offset;t=this.getUint32(),s=this.getUint32(),this.skipOffsetTo(e)}else if(e)s=this.getUint32(),t=this.getUint32();else{const e=this._offset;s=this.getUint32(),t=this.getUint32(),this.skipOffsetTo(e)}return 4294967296*s+t}getUint64Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint64());return t||(this._offset=s),r}getFloat32(e=!0){const t=e?this._getAndUpdateOffsetBy(j.Four):this._offset;return this._dataView.getFloat32(t,this._endianness)}getFloat32Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getFloat32());return t||(this._offset=s),r}getFloat64(e=!0){const t=e?this._getAndUpdateOffsetBy(j.Eight):this._offset;return this._dataView.getFloat64(t,this._endianness)}getFloat64Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getFloat64());return t||(this._offset=s),r}getChar(e=!0){return String.fromCharCode(this.getUint8(e))}getString(e,t=!0){const s=this._offset;let r="";for(let t=0;t<e;t++)r+=String.fromCharCode(this.getUint8());return t||(this._offset=s),r}getArrayBuffer(e){const t=this._getAndUpdateOffsetBy(e);return this._dataView.buffer.slice(t,t+e)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TDataBaseManager
 * @classdesc The base class of database managers. Give the basic interface about database call.
 *
 * @requires {@link HttpVerb}
 * @requires {@link ResponseType}
 * @requires {@link HttpStatusCode}
 * @requires {@link TOrchestrator}
 * @requires {@link TStore}
 *
 * @example Todo
 *
 */const G=new class{constructor(){this._id=0}get id(){return this._id+=1,this._id}},z=e({CreateOne:0,CreateMany:1,ReadOne:2,ReadMany:3,ReadWhere:4,ReadAll:5,UpdateOne:6,UpdateMany:7,UpdateWhere:8,UpdateAll:9,DeleteOne:10,DeleteMany:11,DeleteWhere:12,DeleteAll:13});class K{static get requestId(){return K._requestId++,K._requestId}constructor(e={}){const t={basePath:"/",responseType:k.Json,bunchSize:500,requestAggregationTime:200,requestsConcurrency:6,logger:S,...e};this.basePath=t.basePath,this.responseType=t.responseType,this.bunchSize=t.bunchSize,this.requestAggregationTime=t.requestAggregationTime,this.requestsConcurrency=t.requestsConcurrency,this.logger=t.logger,this._cache=new D,this._waitingQueue=[],this._aggregateQueue=[],this._requestQueue=[],this._processQueue=[],this._aggregationTimeoutId=null,this._idToRequest=[]}get basePath(){return this._basePath}set basePath(e){if(i(e))throw new TypeError("Base path cannot be null ! Expect a non empty string.");if(a(e))throw new TypeError("Base path cannot be undefined ! Expect a non empty string.");if(c(e))throw new TypeError(`Base path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(g(e))throw new TypeError("Base path cannot be empty ! Expect a non empty string.");if(p(e))throw new TypeError("Base path cannot contain only whitespace ! Expect a non empty string.");this._basePath=e}get responseType(){return this._responseType}set responseType(e){if(i(e))throw new Error("TDataBaseManager: responseType cannot be null !");if(i(e))throw new TypeError("Response type cannot be null ! Expect a non empty string.");if(a(e))throw new TypeError("Response type cannot be undefined ! Expect a non empty string.");this._responseType=e}get bunchSize(){return this._bunchSize}set bunchSize(e){if(i(e))throw new TypeError("Bunch size cannot be null ! Expect a positive number.");if(a(e))throw new TypeError("Bunch size cannot be undefined ! Expect a positive number.");if(d(e))throw new TypeError(`Bunch size cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(!f(e))throw new TypeError("Bunch size cannot be lower or equal to zero ! Expect a positive number.");this._bunchSize=e}get requestAggregationTime(){return this._requestAggregationTime}set requestAggregationTime(e){if(i(e))throw new TypeError("Requests aggregation time cannot be null ! Expect a positive number.");if(a(e))throw new TypeError("Requests aggregation time cannot be undefined ! Expect a positive number.");if(d(e))throw new TypeError(`Requests aggregation time cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(_(e))throw new TypeError("Requests aggregation time cannot be lower or equal to zero ! Expect a positive number.");this._requestAggregationTime=e}get requestsConcurrency(){return this._requestsConcurrency}set requestsConcurrency(e){if(i(e))throw new TypeError("Minimum of simultaneous request cannot be null ! Expect a positive number.");if(a(e))throw new TypeError("Minimum of simultaneous request cannot be undefined ! Expect a positive number.");if(d(e))throw new TypeError(`Minimum of simultaneous request cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(y(e)||_(e))throw new TypeError("Minimum of simultaneous request cannot be lower or equal to zero ! Expect a positive number.");this._requestsConcurrency=e}get logger(){return this._logger}set logger(e){if(i(e))throw new TypeError("Progress manager cannot be null ! Expect an instance of TProgressManager.");if(a(e))throw new TypeError("Progress manager cannot be undefined ! Expect an instance of TProgressManager.");if(!(e instanceof B))throw new TypeError(`Progress manager cannot be an instance of ${e.constructor.name} ! Expect an instance of TProgressManager.`);this._logger=e}setBasePath(e){return this.basePath=e,this}setResponseType(e){return this.responseType=e,this}setBunchSize(e){return this.bunchSize=e,this}setRequestAggregationTime(e){return this.requestAggregationTime=e,this}setRequestsConcurrency(e){return this.requestsConcurrency=e,this}setLogger(e){return this.logger=e,this}aggregateQueue(){clearTimeout(this._aggregationTimeoutId),this._aggregationTimeoutId=setTimeout((()=>{const e=this._idToRequest;let t=[];for(let s=e.length-1;s>=0;s--)t.push(e.pop()),t.length!==this._bunchSize&&0!==s||(this._requestQueue.push({_id:`readMany_${G.id}`,_timeStart:new Date,_type:z.ReadMany,method:C.Read.value,url:this._basePath,data:{ids:t},responseType:this._responseType}),t=[]);this.processQueue.call(this)}),this._requestAggregationTime)}processQueue(){for(;this._requestQueue.length>0&&this._processQueue.length<this._requestsConcurrency;){const a=this._requestQueue.pop();this._processQueue.push(a);const o=new XMLHttpRequest;o.onloadstart=e.bind(this),o.onload=this._onLoad.bind(this,a,this._onEnd.bind(this,a,a.onLoad),this._onProgress.bind(this,a.onProgress),this._onError.bind(this,a,a.onError)),o.onloadend=t.bind(this),o.onprogress=this._onProgress.bind(this,a.onProgress),o.onreadystatechange=s.bind(this),o.onabort=r.bind(this),o.onerror=this._onError.bind(this,a,a.onError),o.ontimeout=i.bind(this),o.open(a.method,a.url,!0),o.setRequestHeader("Content-Type","application/json"),o.setRequestHeader("Accept","application/json"),o.responseType=a.responseType.value;const n=a.data&&a.responseType===k.Json?JSON.stringify(a.data):a.data;o.send(n)}function e(e){this.logger.progress(e)}function t(e){this.logger.progress(e)}function s(e){this.logger.debug(e)}function r(e){this.logger.error(e)}function i(e){this.logger.error(e)}}create(e,t,s,r){w(e)&&v(e)?m(e)?this._createOne(e[0],t,s,r):this._createMany(e,t,s,r):b(e)&&E(e)?this._createOne(e,t,s,r):r("TDataBaseManager.create: Invalid data type, expect object or array of objects.")}read(e,t,r,i,a){s(e)&&T(e)&&O(e)?this._readOne(e,t,r,i,a):w(e)&&v(e)?m(e)?this._readOne(e[0],t,r,i,a):this._readMany(e,t,r,i,a):b(e)?R(e)?this._readAll(t,r,i,a):this._readWhere(e,t,r,i,a):a("TDataBaseManager.read: Invalid data type, expect string, object or array of objects.")}update(e,t,r,i,a){A(t)?a("TDataBaseManager.update: Update data cannot be null or undefined !"):o(t)?a("TDataBaseManager.update: Invalid update data type. Expect an object."):s(e)&&T(e)&&O(e)?this._updateOne(e,t,r,i,a):w(e)&&v(e)?m(e)?this._updateOne(e[0],t,r,i,a):this._updateMany(e,t,r,i,a):b(e)?R(e)?this._updateAll(t,r,i,a):this._updateWhere(e,t,r,i,a):a("TDataBaseManager.update: Invalid data type, expect string, object or array of objects.")}delete(e,t,r,i){s(e)&&T(e)&&O(e)?this._deleteOne(e,t,r,i):w(e)&&v(e)?m(e)?this._deleteOne(e[0],t,r,i):this._deleteMany(e,t,r,i):b(e)?R(e)?this._deleteAll(t,r,i):this._deleteWhere(e,t,r,i):i("TDataBaseManager.delete: Invalid data type, expect null, string, object or array of objects.")}_onLoad(e,t,s,r,i){const a=i.target,o=a.status,n=a.response,u=a.responseType;switch(o){case P.Ok.value:this._dispatchResponse(n,u,t,s,r);break;case P.NonAuthoritativeInformation.value:case P.NoContent.value:case P.ResetContent.value:case P.PartialContent.value:case P.MultiStatus.value:case P.AlreadyReported.value:case P.ContentDifferent.value:case P.IMUsed.value:case P.MultipleChoices.value:case P.MovedPermanently.value:case P.Found.value:case P.SeeOther.value:case P.NotModified.value:case P.UseProxy.value:case P.Unused.value:case P.TemporaryRedirect.value:case P.PermanentRedirect.value:case P.TooManyRedirects.value:case P.BadRequest.value:case P.Unauthorized.value:case P.PaymentRequired.value:case P.Forbidden.value:case P.NotFound.value:case P.MethodNotAllowed.value:case P.NotAcceptable.value:case P.ProxyAuthenticationRequired.value:case P.RequestTimeOut.value:case P.Conflict.value:case P.Gone.value:case P.LengthRequired.value:case P.PreconditionFailed.value:case P.RequestEntityTooLarge.value:case P.RequestRangeUnsatisfiable.value:case P.ExpectationFailed.value:case P.ImATeapot.value:case P.BadMapping.value:case P.UnprocessableEntity.value:case P.Locked.value:case P.MethodFailure.value:case P.UnorderedCollection.value:case P.UpgradeRequired.value:case P.PreconditionRequired.value:case P.TooManyRequests.value:case P.RequestHeaderFieldsTooLarge.value:case P.NoResponse.value:case P.RetryWith.value:case P.BlockedByWindowsParentalControls.value:case P.UnavailableForLegalReasons.value:case P.UnrecoverableError.value:case P.SSLCertificateError.value:case P.SSLCertificateRequired.value:case P.HTTPRequestSentToHTTPSPort.value:case P.ClientClosedRequest.value:case P.InternalServerError.value:case P.NotImplemented.value:case P.BadGateway.value:case P.ServiceUnavailable.value:case P.GatewayTimeOut.value:case P.HTTPVersionNotSupported.value:case P.VariantAlsoNegotiates.value:case P.InsufficientStorage.value:case P.LoopDetected.value:case P.BandwidthLimitExceeded.value:case P.NotExtended.value:case P.NetworkAuthenticationRequired.value:case P.UnknownError.value:case P.WebServerIsDown.value:case P.ConnectionTimedOut.value:case P.OriginIsUnreachable.value:case P.ATimeoutOccured.value:case P.SSLHandshakeFailed.value:case P.InvalidSSLCertificate.value:case P.RailgunError.value:r(n);break;default:throw new RangeError(`Unmanaged HttpStatusCode: ${o}`)}}_onProgress(e,t){M(this.logger)?this.logger.progress(t,e):M(e)&&e(t)}_onError(e,t,s){this._closeRequest(e),M(this.logger)?this.logger.error(s,t):M(t)&&t(s)}_onEnd(e,t,s){const r=e._type;switch(r){case z.ReadOne:case z.ReadMany:this._updateCache(s),this._updateWaitingQueue();break;case z.ReadWhere:case z.ReadAll:this._updateCache(s),this._updateWaitingQueue(),t(s);break;case z.CreateOne:case z.CreateMany:case z.UpdateOne:case z.UpdateMany:case z.UpdateWhere:case z.UpdateAll:case z.DeleteOne:case z.DeleteMany:case z.DeleteWhere:case z.DeleteAll:t(s);break;default:throw new RangeError(`Invalid request type: ${r}`)}this._closeRequest(e)}_dispatchResponse(e,t,s,r,i){switch(t){case k.ArrayBuffer.value:this._onArrayBuffer(e,s,r,i);break;case k.Blob.value:this._onBlob(e,s,r,i);break;case k.Json.value:this._onJson(e,s,r,i);break;case k.DOMString.value:case k.Default.value:this._onText(e,s,r,i);break;default:throw new Error(`Unknown response type: ${t}`)}}_closeRequest(e){if(this._processQueue.splice(this._processQueue.indexOf(e),1),Window.Itee&&Window.Itee.Debug){const t=(new Date).valueOf()-e._timeStart.valueOf(),s=`${this.constructor.name} close request [${e._id}] on ${t}ms.Waiting queue: ${this._waitingQueue.length}Request queue: ${this._requestQueue.length}Process queue: ${this._processQueue.length}==========================`;this.logger.debug(s)}this.processQueue()}_retrieveCachedValues(e){let t={},s=[],r=[];for(let a=0,o=e.length;a<o;a++){const o=e[a],n=this._cache.get(o);M(n)?t[o]=n:i(n)?s.push(o):r.push(o)}return{results:t,underRequest:s,toRequest:r}}_updateCache(e){if(i(e))throw new TypeError("Data cannot be null ! Expect an array of object.");if(a(e))throw new TypeError("Data cannot be undefined ! Expect an array of object.");let t={};if(w(e))for(let s in e)t[e[s]._id]=e[s];else t=e;for(let[e,s]of Object.entries(t)){const t=this._cache.get(e);i(t)?this._cache.add(e,s,!0):a(t)?(this.logger.warn("Cache was not pre-allocated with null value."),this._cache.add(e,s)):this.logger.error("Cached value already exist !")}}_updateWaitingQueue(){const e=0===this._requestQueue.length&&0===this._processQueue.length;for(let t=this._waitingQueue.length-1;t>=0;t--){const s=this._waitingQueue[t];for(let e=s.underRequest.length-1;e>=0;e--){const t=s.underRequest[e],r=this._cache.get(t);A(r)||(s.results[t]=r,s.underRequest.splice(s.underRequest.indexOf(t),1))}const r=0===s.underRequest.length;r?(this._waitingQueue.splice(t,1),s.onLoadCallback(s.results)):!r&&e&&(this.logger.warn("Incomplet demand but empty request/process queue"),this._waitingQueue.splice(t,1),s.onLoadCallback(s.results))}}_onArrayBuffer(e,t,s,r){}_onBlob(e,t,s,r){}_onJson(e,t,s,r){}_onText(e,t,s,r){}_createOne(e,t,s,r){this._requestQueue.push({_id:`createOne_${G.id}`,_timeStart:new Date,_type:z.CreateOne,method:C.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_createMany(e,t,s,r){this._requestQueue.push({_id:`createMany_${G.id}`,_timeStart:new Date,_type:z.CreateMany,method:C.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_readOne(e,t,s,r,i){const a=this._retrieveCachedValues([e]);if(0===a.toRequest.length)0===a.underRequest.length?s(a.results):(a.onLoadCallback=s,a.onProgressCallback=r,a.onErrorCallback=i,this._waitingQueue.push(a));else{a.onLoadCallback=s,a.onProgressCallback=r,a.onErrorCallback=i,this._waitingQueue.push(a);try{this._cache.add(e,null),a.underRequest.push(e),a.toRequest.splice(a.toRequest.indexOf(e),1)}catch(e){this.logger.error(e)}this._idToRequest.push(e),this.aggregateQueue()}}_readMany(e,t,s,r,i){const a=this._retrieveCachedValues(e);if(0===a.toRequest.length)0===a.underRequest.length?s(a.results):(a.onLoadCallback=s,a.onProgressCallback=r,a.onErrorCallback=i,this._waitingQueue.push(a));else{a.onLoadCallback=s,a.onProgressCallback=r,a.onErrorCallback=i,this._waitingQueue.push(a);const e=a.toRequest;let t;for(let s=e.length-1;s>=0;s--){t=e[s];try{this._cache.add(t,null),a.underRequest.push(t),a.toRequest.splice(a.toRequest.indexOf(t),1)}catch(e){this.logger.error(e)}this._idToRequest.push(t)}this.aggregateQueue()}}_readWhere(e,t,s,r,i){this._requestQueue.push({_id:`readWhere_${G.id}`,_timeStart:new Date,_type:z.ReadWhere,method:C.Read.value,url:this._basePath,data:{query:e,projection:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_readAll(e,t,s,r){this._requestQueue.push({_id:`readAll_${G.id}`,_timeStart:new Date,_type:z.ReadAll,method:C.Read.value,url:this._basePath,data:{query:{},projection:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_updateOne(e,t,s,r,i){this._requestQueue.push({_id:`updateOne_${G.id}`,_timeStart:new Date,_type:z.UpdateOne,method:C.Update.value,url:`${this._basePath}/${e}`,data:{update:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_updateMany(e,t,s,r,i){this._requestQueue.push({_id:`updateMany_${G.id}`,_timeStart:new Date,_type:z.UpdateMany,method:C.Update.value,url:this._basePath,data:{ids:e,update:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_updateWhere(e,t,s,r,i){this._requestQueue.push({_id:`updateWhere_${G.id}`,_timeStart:new Date,_type:z.UpdateWhere,method:C.Update.value,url:this._basePath,data:{query:e,update:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_updateAll(e,t,s,r){this._requestQueue.push({_id:`updateAll_${G.id}`,_timeStart:new Date,_type:z.UpdateAll,method:C.Update.value,url:this._basePath,data:{query:{},update:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteOne(e,t,s,r){this._requestQueue.push({_id:`deleteOne_${G.id}`,_timeStart:new Date,_type:z.DeleteOne,method:C.Delete.value,url:`${this._basePath}/${e}`,data:null,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteMany(e,t,s,r){this._requestQueue.push({_id:`deleteMany_${G.id}`,_timeStart:new Date,_type:z.DeleteMany,method:C.Delete.value,url:this._basePath,data:{ids:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteWhere(e,t,s,r){this._requestQueue.push({_id:`deleteWhere_${G.id}`,_timeStart:new Date,_type:z.DeleteWhere,method:C.Delete.value,url:this._basePath,data:{query:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteAll(e,t,s){this._requestQueue.push({_id:`deleteAll_${G.id}`,_timeStart:new Date,_type:z.DeleteAll,method:C.Delete.value,url:this._basePath,data:{query:{}},onLoad:e,onProgress:t,onError:s,responseType:this._responseType}),this.processQueue()}}K._requestId=0,K._requests={waitingQueue:{},toProcess:{create:{},read:{},update:{},delete:{}},underProcess:{create:{},read:{},update:{},delete:{}},processed:{create:{},read:{},update:{},delete:{}}};const X=e({Number:0,String:1,Uuid:2});class Y{constructor(e=X.Number,t=null){this.type=e,this.base=t,this._counter=0}get type(){return this._type}set type(e){if(i(e))throw new Error(`Type cannot be null ! Expect an value from TIdFactoryType enum: ${X.types()}`);if(a(e))throw new Error(`Type cannot be undefined ! Expect an value from TIdFactoryType enum: ${X.types()}`);if(!X.includes(e))throw new Error(`Invalide type ! Expect an value from TIdFactoryType enum: ${X.types()}`);this._type=e}get base(){return this._base}set base(e){if(a(e))throw new Error("Base cannot be undefined ! Expect an instance of Object3D.");if(this._type===X.Number&&d(e))throw new Error("Invalide Base ! It does not match the type.");if(this._type===X.String&&c(e))throw new Error("Invalide Base ! It does not match the type.");this._base=e}setType(e){return this.type=e,this}setBase(e){return this.base=e,this}createId(){return this._base+this._counter++}}var Z,ee=new Uint8Array(16);function te(){if(!Z&&!(Z="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Z(ee)}var se=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function re(e){return"string"==typeof e&&se.test(e)}for(var ie=[],ae=0;ae<256;++ae)ie.push((ae+256).toString(16).substr(1));function oe(e,t,s){var r=(e=e||{}).random||(e.rng||te)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){s=s||0;for(var i=0;i<16;++i)t[s+i]=r[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=(ie[e[t+0]]+ie[e[t+1]]+ie[e[t+2]]+ie[e[t+3]]+"-"+ie[e[t+4]]+ie[e[t+5]]+"-"+ie[e[t+6]]+ie[e[t+7]]+"-"+ie[e[t+8]]+ie[e[t+9]]+"-"+ie[e[t+10]]+ie[e[t+11]]+ie[e[t+12]]+ie[e[t+13]]+ie[e[t+14]]+ie[e[t+15]]).toLowerCase();if(!re(s))throw TypeError("Stringified UUID is invalid");return s}(r)}class ne{static isWebAPIMessage=!0;constructor(e){this._id=oe(),this.type=e}get id(){return this._id}get type(){return this._type}set type(e){if(c(e))throw new ReferenceError("WebAPIMessage type cannot be null or undefined !");if(g(e))throw new TypeError("WebAPIMessage type cannot be an empty string !");this._type=e}toJSON(){return{id:this.id,type:this.type}}}class ue extends ne{static isWebAPIMessageData=!0;constructor(e){super("_data"),this.data=e}toJSON(){return{...super.toJSON(),data:JSON.stringify(this.data)}}}class le extends ne{static isWebAPIMessageError=!0;static isError(e){return e instanceof Error||b(e)&&(M(e.name)||M(e.message)||M(e.stack))}constructor(e){super("_error"),this.error=e}get error(){return this._error}set error(e){if(A(e))throw new ReferenceError(`Expect a string, or Error like. But got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);if(s(e))this._error={name:"UnknownError",message:e};else{if(!le.isError(e))throw new TypeError(`Expect a string, or Error like. But got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);this._error={name:e.name,message:e.message,stack:e.stack}}}toJSON(){return{...super.toJSON(),error:this.error}}}class he extends ne{static isWebAPIMessageReady=!0;constructor(e={}){super("_ready");const t={isBind:!1,...e};this.isBind=t.isBind}get isBind(){return this._isBind}set isBind(e){if(A(e))throw new ReferenceError("WebAPIMessageReady isBind cannot be null or undefined ! Expect a boolean value.");if(n(e))throw new TypeError("WebAPIMessageReady isBind expect a boolean value.");this._isBind=e}toJSON(){return{...super.toJSON(),isBind:this.isBind}}}class de extends ne{static isWebAPIMessageRequest=!0;constructor(e,t=[]){super("_request"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){if(A(e))throw new ReferenceError("Expect a string that represent a api method name, but got undefined or null value.");if(c(e))throw new TypeError(`Expect a string that represent a api method name, but got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);if(g(e)||p(e))throw new TypeError("Expect a string that represent a api method name, but got empty or blank string.");this._method=e}get parameters(){return this._parameters}set parameters(e){if(u(e))throw new TypeError(`Expect an array of parameters, but got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);this._parameters=e}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}}class ce extends ne{static isWebApiMessageResponse=!0;constructor(e,t){super("_response"),this.request=e,this.result=t}get request(){return this._request}set request(e){i(e)||a(e)||(this._request=e)}get result(){return this._result}set result(e){this._result=e}toJSON(){return{...super.toJSON(),request:this.request,result:this.result}}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class ge{constructor(e={}){const t={uri:"",allowedMethods:["*"],window:null,messageQueue:[],isReachable:!0,isReady:!1,...e,id:M(e.id)?e.id:oe()};this._id=t.id,this.uri=t.uri,this.allowedMethods=t.allowedMethods,this.window=t.window,this.isReachable=t.isReachable,this.isReady=t.isReady,this.messageQueue=t.messageQueue}get id(){return this._id}get uri(){return this._uri}set uri(e){if(A(e))throw new ReferenceError("WebAPIOrigin uri cannot be null or undefined !");if(c(e))throw new TypeError(`WebAPIOrigin uri expect to be a string. Got '${typeof e}' !`);if(g(e))throw new RangeError("WebAPIOrigin uri cannot be an empty string !");this._uri=e}get allowedMethods(){return this._allowedMethods}set allowedMethods(e){if(A(e))throw new ReferenceError("WebAPIOrigin methods cannot be null or undefined ! Expect an array of method name.");if(u(e))throw new TypeError(`WebAPIOrigin methods expect to be an array of method name (string).Got '${typeof e}' !`);if(q(e))throw new RangeError("WebAPIOrigin methods cannot be an empty array ! Expect an array of method name.");this._allowedMethods=e}get window(){return this._window}set window(e){this._window=e}get isReady(){return this._isReady}set isReady(e){if(A(e))throw new ReferenceError("WebAPIOrigin isReady cannot be null or undefined !");if(n(e))throw new TypeError(`WebAPIOrigin isReady expect a Boolean. Got '${typeof e}' !`);this._isReady=e}get isReachable(){return this._isReachable}set isReachable(e){if(A(e))throw new ReferenceError("WebAPIOrigin isReachable cannot be null or undefined !");if(n(e))throw new TypeError(`WebAPIOrigin isReachable expect a Boolean. Got '${typeof e}' !`);this._isReachable=e}get messageQueue(){return this._messageQueue}set messageQueue(e){this._messageQueue=e}setUri(e){return this.uri=e,this}setAllowedMethods(e){return this.allowedMethods=e,this}addAllowedMethod(e){return this.allowedMethods.includes(e)||this.allowedMethods.push(e),this}removeAllowedMethod(e){const t=this.allowedMethods.indexOf(e);return t>=0&&this.allowedMethods.slice(t,e),this}setWindow(e){return this.window=e,this}setReadyState(e){return this.isReady=e,this}setReachableState(e){return this.isReachable=e,this}}class pe{constructor(e={}){const t={logger:S,allowedOrigins:[],requestTimeout:2e3,methods:this,broadcastReadyOnInit:!0,...e};this._localOriginUri=window.location.origin,this._awaitingRequest=new Map,window.addEventListener("message",this._onMessage.bind(this),!1),this.logger=t.logger,this.allowedOrigins=t.allowedOrigins,this.requestTimeout=t.requestTimeout,this.methods=t.methods,t.broadcastReadyOnInit&&this._broadcastReadyMessage()}get logger(){return this._logger}set logger(e){if(i(e))throw new ReferenceError(`[${this._localOriginUri}]: The logger cannot be null, expect a TLogger.`);if(a(e))throw new ReferenceError(`[${this._localOriginUri}]: The logger cannot be undefined, expect a TLogger.`);if(!e.isLogger)throw new ReferenceError(`[${this._localOriginUri}]: The logger cannot be undefined, expect a TLogger.`);this._logger=e}get allowedOrigins(){return this._allowedOrigins}set allowedOrigins(e){this._allowedOrigins=[];const s=t(e);if(s.includes("*"))return this.logger.warn(`[${this._localOriginUri}]: This webApi is allowed for all origin and could lead to security concerne !`),void this._allowedOrigins.push("*");for(let e of s){const t=new ge({id:e.id,uri:e.uri,methods:e.methods,window:this._getOriginWindow(e.uri)});this._allowedOrigins.push(t)}}get requestTimeout(){return this._requestTimeout}set requestTimeout(e){if(i(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout cannot be null, expect to be 0 or a positive number.`);if(a(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout cannot be undefined, expect to be 0 or a positive number.`);if(d(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout expect to be 0 or a positive number.`);if(_(e)&&!y(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout expect to be 0 or a positive number.`);this._requestTimeout=e}get methods(){return this._methods}set methods(e){if(i(e))throw new ReferenceError(`[${this._localOriginUri}]: The methods cannot be null, expect any keyed collection of function.`);if(a(e))throw new ReferenceError(`[${this._localOriginUri}]: The methods cannot be undefined, expect any keyed collection of function.`);this._methods=e}setLogger(e){return this.logger=e,this}setAllowedOrigins(e){return this.allowedOrigins=e,this}setRequestTimeout(e){return this.requestTimeout=e,this}setMethods(e){return this.methods=e,this}_isInIframe(){try{return window.self!==window.top}catch(e){return!0}}_isNotAllowedForAllOrigins(){return!this._allowedOrigins.includes("*")}_isNotAllowedOrigin(e){return!this._allowedOrigins.filter((e=>"*"!==e)).map((e=>e.uri)).includes(e)}_isSameOrigin(e){return this._localOriginUri===e}_isNotAllowedForAllMethods(e){return-1===e.allowedMethods.indexOf("*")}_isNotAllowedMethod(e,t){return-1===e.allowedMethods.indexOf(t)}_methodNotExist(e){return A(this.methods[e])}_getAllowedOriginBy(e,t){return this.allowedOrigins.find((s=>s[e]===t))}_getOriginWindow(e){let t;if(this._isInIframe())t=window.parent;else{const s=document.getElementsByTagName("iframe"),r=Array.from(s).find((t=>t.src.includes(e)));A(r)?(this.logger.warn(`[${this._localOriginUri}]: Unable to find iframe element for [${e}] URI !`),t=null):t=r.contentWindow}return t}_processMessageQueueOf(e){const t=e.messageQueue;for(let s=t.length-1;s>=0;s--)this.postMessageTo(e.id,t.shift())}_broadcastReadyMessage(){const e=new he;let t=250;const s=()=>{const r=this.allowedOrigins.filter((e=>!e.isReady&&e.isReachable));if(!q(r)){for(let t of r)this.postReadyTo(t.id,e);t+=t,setTimeout(s,t)}};s()}async _onMessage(e){if(this._isNotAllowedForAllOrigins()&&this._isNotAllowedOrigin(e.origin))return void this.logger.warn(`[${this._localOriginUri}]: An unallowed origin [${e.origin}] try to access the web api.`);if(this._isSameOrigin(e.origin))return void this.logger.warn(`[${this._localOriginUri}]: A local origin try to access the web api... \n                or... Am i talking to myself  ?\n                Said i (${s(e.data)?e.data:JSON.stringify(e.data)}) ?\n                Hummm... Ehhooo ! Who's there ?\n            `);let t=this._getAllowedOriginBy("uri",e.origin);A(t)?(t=new ge({uri:e.origin,window:e.source}),this.allowedOrigins.push(t)):i(t.window)&&(t.window=e.source);const r=e.data,a=b(r)?r:JSON.parse(r);A(a)?this.logger.error(`[${this._localOriginUri}]: Recieve null or undefined message from [${t.uri}] ! Expect a json object.`):await this._dispatchMessageFrom(t,a)}async _dispatchMessageFrom(e,t){switch(this.logger.log(`[${this._localOriginUri}]: Recieve message of type '${t.type}' from [${e.uri}].`),t.type){case"_ready":this._onReadyFrom(e,t);break;case"_request":await this._onRequestFrom(e,t);break;case"_response":this._onResponseFrom(e,t);break;case"_data":this.onDataFrom(e,t);break;case"_error":this.onErrorFrom(e,t);break;default:this.onMessageFrom(e,t)}}_onReadyFrom(e,t){if(!e.isReady&&(e.isReady=!0,!t.isBind)){const t=new he({isBind:!0});this.postMessageTo(e.id,t,!0)}this._processMessageQueueOf(e)}async _onRequestFrom(e,t){let s;const r=t.method,i=t.parameters;if(this._isNotAllowedForAllMethods(e)&&this._isNotAllowedMethod(e,r))this.logger.error(`[${this._localOriginUri}]: Origin [${e.uri}] try to access an unallowed method named '${r}'.`),s=new le(new RangeError(`Trying to access an unallowed method named '${r}'.`));else if(this._methodNotExist(r))this.logger.error(`[${this._localOriginUri}]: Origin [${e.uri}] try to access an unexisting method named '${r}'.`),s=new le(new RangeError(`Trying to access an unexisting method named '${r}'.`));else try{const e=await this.methods[r](...i);s=new ue(e)}catch(e){s=new le(e)}this.postResponseTo(e.id,t,s)}_onResponseFrom(e,t){const s=t.request.id;if(!this._awaitingRequest.has(s))return;const r=this._awaitingRequest.get(s);this._awaitingRequest.delete(s),clearTimeout(r.timeoutId);const i=t.result;M(i)?"_error"===i.type?r.reject(i.error):"_data"===i.type?r.resolve(i.data):r.resolve(i):r.resolve()}onErrorFrom(e,t){this.logger.error(`[${this._localOriginUri}]: the origin [${e.uri}] send error => ${JSON.stringify(t.error,null,4)}. Need you to reimplement this method ?`)}onDataFrom(e,t){this.logger.log(`[${this._localOriginUri}]: the origin [${e.uri}] send data => ${JSON.stringify(t.data,null,4)}. Need you to reimplement this method ?`)}onMessageFrom(e,t){this.logger.log(`[${this._localOriginUri}]: the origin [${e.uri}] send custom message => ${JSON.stringify(t,null,4)}. Need you to reimplement this method ?`)}postReadyTo(e,t){const s=t&&t.constructor.isWebAPIMessageReady?t:new he;this.postMessageTo(e,s,!0)}postRequestTo(e,t,...s){const r=t&&t.constructor.isWebAPIMessageRequest?t:new de(t,s);return new Promise(((t,s)=>{try{this._awaitingRequest.set(r.id,{request:r,resolve:t,reject:s,timeoutId:setTimeout((()=>{this._awaitingRequest.delete(r.id),s(new Error(`Request timeout for ${JSON.stringify(r,null,4)}`))}),this.requestTimeout)}),this.postMessageTo(e,r)}catch(e){s(e)}}))}postResponseTo(e,t,s){const r=s&&s.constructor.isWebAPIMessageResponse?s:new ce(t,s);this.postMessageTo(e,r)}postErrorTo(e,t){const s=t&&t.constructor.isWebAPIMessageError?t:new le(t);this.postMessageTo(e,s)}postDataTo(e,t){const s=t&&t.constructor.isWebAPIMessageData?t:new ue(t);this.postMessageTo(e,s)}postMessageTo(e,t,s=!1){if(A(e))throw new ReferenceError(`[${this._localOriginUri}]: Unable to post message to null or undefined origin id !`);if(A(t))throw new ReferenceError(`[${this._localOriginUri}]: Unable to post null or undefined message !`);const r=this._getAllowedOriginBy("id",e);if(A(r))throw new ReferenceError(`[${this._localOriginUri}]: Unable to retrieved origin with id: ${e}`);try{s||r.isReady?s&&!r.window?(this.logger.error(`[${this._localOriginUri}]: Origin [${r.uri}] is unreachable !`),r.messageQueue.push(t)):(this.logger.log(`[${this._localOriginUri}]: Send message of type '${t.type}' to [${r.uri}]`),r.window.postMessage(JSON.stringify(t),r.uri)):(this.logger.warn(`[${this._localOriginUri}]: Origin [${r.uri}] is not ready yet !`),r.messageQueue.push(t))}catch(e){this.logger.error(e)}}}class fe extends ne{static isWebAPIMessageProgress=!0;constructor(e=0,t=0){super("_progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}class _e{static isWorkerMessage=!0;constructor(e){this.type=e}get type(){return this._type}set type(e){this._type=e}toJSON(){return{type:this.type}}}class ye extends _e{static isWorkerMessageData=!0;constructor(e,t){super(e),this.buffer=t}toJSON(){return{...super.toJSON(),buffer:this.buffer}}}class we extends _e{static isWorkerMessageError=!0;constructor(e){super("error"),this.message=e.message,this.stack=e.stack}toJSON(){return{...super.toJSON(),message:this.message,stack:this.stack}}}class ve extends _e{static isWorkerMessageProgress=!0;constructor(e=0,t=0){super("progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}class me{postProgress(e){e.isWorkerMessageProgress?postMessage(e.toJSON()):postMessage(new ve(e.loaded,e.total).toJSON())}postError(e){e.isWorkerMessageError?postMessage(e.toJSON()):postMessage(new we(e).toJSON())}postData(e,t){if(w(t))postMessage(new ye(e,t).toJSON(),[...t]);else{if(!U(t))throw new TypeError(`AbstractWorker.postData: Unable to post data of type [${e}].`);postMessage(new ye(e,t).toJSON(),[t])}}onMessage(e){if(A(e))return this.postError(new Error("Message event cannot be null or undefined !")),!0;const t=e.data;if(A(t))return this.postError(new Error("Message data cannot be null or undefined !")),!0;const s=t.type;if(A(s))return this.postError(new Error("Message data type cannot be null or undefined !")),!0;if("methodCall"===t.type){const e=t.method;if(A(e))return this.postError(new Error('Message of type "methodCall" cannot have null, undefined or empty name !')),!0;if(c(e))return this.postError(new Error('Message of type "methodCall" expect name to be a string !')),!0;if(g(e))return this.postError(new Error('Message of type "methodCall" expect name to be a non empty string !')),!0;const s=t.parameters||[];return u(s)?(this.postError(new Error('Message of type "methodCall" expect parameters to be an array !')),!0):(this._invoke(e,s),!0)}}_invoke(e,t=[]){try{const s=this[e](...t);s&&postMessage({type:e,result:s})}catch(e){this.postError(e)}}}class be extends _e{static isWorkerMessageMethodCall=!0;constructor(e,t=[]){super("methodCall"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){i(e)||a(e)||c(e)||(this._method=e)}get parameters(){return this._parameters}set parameters(e){u(e)||(this._parameters=e)}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}}export{me as AbstractWorker,j as Byte,J as Endianness,$ as FileFormat,P as HttpStatusCode,C as HttpVerb,N as Keys,I as MimeType,x as Mouse,k as ResponseType,L as TAbstractFactory,H as TBinaryReader,W as TCloningFactory,K as TDataBaseManager,Y as TIdFactory,X as TIdFactoryType,F as TInstancingFactory,Q as TKeyboardController,V as TMouseController,D as TStore,pe as WebAPI,ne as WebAPIMessage,ue as WebAPIMessageData,le as WebAPIMessageError,fe as WebAPIMessageProgress,he as WebAPIMessageReady,de as WebAPIMessageRequest,ce as WebAPIMessageResponse,_e as WorkerMessage,ye as WorkerMessageData,we as WorkerMessageError,be as WorkerMessageMethodCall,ve as WorkerMessageProgress};
