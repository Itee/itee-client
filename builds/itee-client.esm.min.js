import{toEnum as e}from"itee-utils";import{isString as t,isFunction as s,isNull as r,isUndefined as a,isNotObject as o,isNotBoolean as n,isNotArray as i,isNotUndefined as u,isObject as l,isArrayOfString as h,isArrayOfObject as c,isNotArrayBuffer as d,isNotNumber as p,isNotString as g,isEmptyString as _,isBlankString as v,isNumberPositive as f,isNumberNegative as y,isZero as m,isArray as w,isNotEmptyArray as b,isArrayOfSingleElement as E,isNotEmptyObject as T,isNotEmptyString as O,isNotBlankString as R,isEmptyObject as A,isNotDefined as M,isDefined as q,isFalse as C,isArrayBuffer as P}from"itee-validators";const S=e({Asc:{value:"asc"},Dae:{value:"dae"},Dbf:{value:"dbf"},Fbx:{value:"fbx"},Mtl:{value:"mtl"},Json:{value:"json"},Obj:{value:"obj"},Shp:{value:"shp"},Stl:{value:"stl"}}),I=e({Continue:{value:100},SwitchingProtocols:{value:101},Processing:{value:102},Ok:{value:200},Created:{value:201},Accepted:{value:202},NonAuthoritativeInformation:{value:203},NoContent:{value:204},ResetContent:{value:205},PartialContent:{value:206},MultiStatus:{value:207},AlreadyReported:{value:208},ContentDifferent:{value:210},IMUsed:{value:226},MultipleChoices:{value:300},MovedPermanently:{value:301},Found:{value:302},SeeOther:{value:303},NotModified:{value:304},UseProxy:{value:305},Unused:{value:306},TemporaryRedirect:{value:307},PermanentRedirect:{value:308},TooManyRedirects:{value:310},BadRequest:{value:400},Unauthorized:{value:401},PaymentRequired:{value:402},Forbidden:{value:403},NotFound:{value:404},MethodNotAllowed:{value:405},NotAcceptable:{value:406},ProxyAuthenticationRequired:{value:407},RequestTimeOut:{value:408},Conflict:{value:409},Gone:{value:410},LengthRequired:{value:411},PreconditionFailed:{value:412},RequestEntityTooLarge:{value:413},RequestRangeUnsatisfiable:{value:416},ExpectationFailed:{value:417},ImATeapot:{value:418},BadMapping:{value:421},UnprocessableEntity:{value:422},Locked:{value:423},MethodFailure:{value:424},UnorderedCollection:{value:425},UpgradeRequired:{value:426},PreconditionRequired:{value:428},TooManyRequests:{value:429},RequestHeaderFieldsTooLarge:{value:431},NoResponse:{value:444},RetryWith:{value:449},BlockedByWindowsParentalControls:{value:450},UnavailableForLegalReasons:{value:451},UnrecoverableError:{value:456},SSLCertificateError:{value:495},SSLCertificateRequired:{value:496},HTTPRequestSentToHTTPSPort:{value:497},ClientClosedRequest:{value:499},InternalServerError:{value:500},NotImplemented:{value:501},BadGateway:{value:502},ServiceUnavailable:{value:503},GatewayTimeOut:{value:504},HTTPVersionNotSupported:{value:505},VariantAlsoNegotiates:{value:506},InsufficientStorage:{value:507},LoopDetected:{value:508},BandwidthLimitExceeded:{value:509},NotExtended:{value:510},NetworkAuthenticationRequired:{value:511},UnknownError:{value:520},WebServerIsDown:{value:521},ConnectionTimedOut:{value:522},OriginIsUnreachable:{value:523},ATimeoutOccured:{value:524},SSLHandshakeFailed:{value:525},InvalidSSLCertificate:{value:526},RailgunError:{value:527}}),U=e({Create:{value:"PUT"},Read:{value:"POST"},Update:{value:"PATCH"},Delete:{value:"DELETE"}}),D=e({BACKSPACE:{value:8},TAB:{value:9},ENTER:{value:13},SHIFT:{value:16},CTRL:{value:17},ALT:{value:18},PAUSE:{value:19},CAPS_LOCK:{value:20},ESCAPE:{value:27},SPACE:{value:32},PAGE_UP:{value:33},PAGE_DOWN:{value:34},END:{value:35},HOME:{value:36},LEFT_ARROW:{value:37},UP_ARROW:{value:38},RIGHT_ARROW:{value:39},DOWN_ARROW:{value:40},INSERT:{value:45},DELETE:{value:46},ZERO:{value:48},ONE:{value:49},TWO:{value:50},THREE:{value:51},FOUR:{value:52},FIVE:{value:53},SIX:{value:54},SEVEN:{value:55},HEIGHT:{value:56},NINE:{value:57},A:{value:65},B:{value:66},C:{value:67},D:{value:68},E:{value:69},F:{value:70},G:{value:71},H:{value:72},I:{value:73},J:{value:74},K:{value:75},L:{value:76},M:{value:77},N:{value:78},O:{value:79},P:{value:80},Q:{value:81},R:{value:82},S:{value:83},T:{value:84},U:{value:85},V:{value:86},W:{value:87},X:{value:88},Y:{value:89},Z:{value:90},LEFT_WINDOW_KEY:{value:91},RIGHT_WINDOW_KEY:{value:92},SELECT_KEY:{value:93},NUMPAD_0:{value:96},NUMPAD_1:{value:97},NUMPAD_2:{value:98},NUMPAD_3:{value:99},NUMPAD_4:{value:100},NUMPAD_5:{value:101},NUMPAD_6:{value:102},NUMPAD_7:{value:103},NUMPAD_8:{value:104},NUMPAD_9:{value:105},MULTIPLY:{value:106},ADD:{value:107},SUBSTRACT:{value:109},DECIMAL_POINT:{value:110},DIVIDE:{value:111},F1:{value:112},F2:{value:113},F3:{value:114},F4:{value:115},F5:{value:116},F6:{value:117},F7:{value:118},F8:{value:119},F9:{value:120},F10:{value:121},F11:{value:122},F12:{value:123},NUM_LOCK:{value:144},SCROLL_LOCK:{value:145},SEMICOLON:{value:186},EQUAL:{value:187},COMMA:{value:188},DASH:{value:189},PERIODE:{value:190},SLASH:{value:191},GRAVE_ACCENT:{value:192},OPEN_SQUARE_BRACKET:{value:219},BACKSLASH:{value:220},CLOSE_SQUARE_BRACKET:{value:221},SINGLE_QUOTE:{value:222}}),L=e({}),N=e({Wheel:{value:-1},Left:{value:0},Middle:{value:1},Right:{value:2}}),k=e({ArrayBuffer:{value:"arraybuffer"},Blob:{value:"blob"},Document:{value:"document"},Json:{value:"json"},DOMString:{value:"text"},Default:{value:""}});
/**
 * @class
 * @classdesc TStore is a simple javascript object whose purpose is to store some ket/value data to future usage. It could be enable/disable.
 *
 * @example {@lang javascript}
 * var cache = new TCache()
 * cache.add( 'foo', 'bar' )
 * TLogger.log( cache.get('foo') ) // 'bar'
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
class x{static _validate(e,r){for(let a=0,o=r.length;a<o;a++){let o=r[a];if(!o.validator(e)){const r=o.error;throw t(r)?new TypeError(r):s(r)?new TypeError(r(e)):new TypeError(e+" is invalid.")}}}constructor(e={}){const t={collection:{},allowOverride:!1,keyValidators:[],valueValidators:[],...e};this.collection=t.collection,this.allowOverride=t.allowOverride,this.keyValidators=t.keyValidators,this.valueValidators=t.valueValidators}get collection(){return this._collection}set collection(e){const t="Expect an object.";if(r(e))throw new TypeError("Collection cannot be null ! "+t);if(a(e))throw new TypeError("Collection cannot be undefined ! "+t);if(o(e))throw new TypeError(`Collection cannot be an instance of ${e.constructor.name} ! ${t}`);this._collection=e}get allowOverride(){return this._allowOverride}set allowOverride(e){const t="Expect a boolean.";if(r(e))throw new TypeError("Allow override cannot be null ! "+t);if(a(e))throw new TypeError("Allow override cannot be undefined ! "+t);if(n(e))throw new TypeError(`Allow override cannot be an instance of ${e.constructor.name} ! ${t}`);this._allowOverride=e}get keyValidators(){return this._keyValidators}set keyValidators(e){const t="Expect an array of TValidator or an empty array.";if(r(e))throw new TypeError("Keys validators cannot be null ! "+t);if(a(e))throw new TypeError("Keys validators cannot be undefined ! "+t);if(i(e))throw new TypeError(`Keys validators cannot be an instance of ${e.constructor.name} ! ${t}`);this._keyValidators=e}get valueValidators(){return this._valueValidators}set valueValidators(e){const t="Expect an array of TValidator or an empty array.";if(r(e))throw new TypeError("Values validators cannot be null ! "+t);if(a(e))throw new TypeError("Values validators cannot be undefined ! "+t);if(i(e))throw new TypeError(`Values validators cannot be an instance of ${e.constructor.name} ! ${t}`);this._valueValidators=e}get keys(){return Object.keys(this._collection)}get values(){return Object.values(this._collection)}setCollection(e){return this.collection=e,this}setAllowOverride(e){return this.allowOverride=e,this}setKeyValidators(e){return this.keyValidators(e),this}setValueValidators(e){return this.valueValidators(e),this}add(e,t,s=!1){if(this.contain(e)&&!this._allowOverride&&!s)throw new TypeError(`Item with key (${e}) already exist in collection !`);return x._validate(e,this._keyValidators),x._validate(t,this._valueValidators),this._collection[e]=t,this}contain(e){return u(this._collection[e])}get(e){return this._collection[e]}remove(e){return delete this._collection[e],this}clear(){return this._collection={},this}}
/**
 * @class
 * @classdesc The abstract class to create factory
 * @abstract
 * @extends TStore
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class $ extends x{constructor(e={}){super({...e})}create(e,...t){}}
/**
 * @class
 * @classdesc The TCloningFactory is a kind a factory that performe instanciation by cloning a base instance.
 * @extends TAbstractFactory
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class F extends ${constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),this.get(e).clone(...t)}}
/**
 * @class
 * @classdesc The TInstancingFactory is a kind a factory that performe instanciation based on registred constructor.
 * @extends TAbstractFactory
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */class B extends ${constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),new this.get(e)(...t)}}const W=e({Console:1,Html:2,Toast:4,File:8,Database:16,All:255}),Q=e({Message:0,Progress:1,Time:2}),V=e({None:0,Debug:1,Info:2,Warning:4,Error:8,All:255});class J{static _levelToString(e){let t="";switch(e){case V.Info:t="info";break;case V.Warning:t="warning";break;case V.Error:t="error";break;default:t="unknownLogLevel"}return t}constructor(e={}){const t={outputLevel:V.Error,outputs:W.Console,...e};this.outputLevel=t.outputLevel,this.outputs=t.outputs,this._logsArray=[],this._timers={},this._counterTrace=0}get outputLevel(){return this._outputLevel}set outputLevel(e){const t="Expect a value from LogLevel enum.";if(r(e))throw new Error("OutputLevel cannot be null ! "+t);if(a(e))throw new Error("OutputLevel cannot be undefined ! "+t);this._outputLevel=e}get outputs(){return this._outputs}set outputs(e){const t="Expect a value from LogOutput enum.";if(r(e))throw new Error("Output cannot be null ! "+t);if(a(e))throw new Error("Output cannot be undefined ! "+t);this._outputs=e}_formatTrace(e,s){const r=`${J._levelToString(e)}_${this._counterTrace}`;if(t(s))this._logsArray[r]=s;else if(l(s))this._logsArray[r]=J._formatObjectError(s);else if(h(s))this._logsArray[r]=s.toString();else if(c(s)){this._logsArray[r]="";for(let t=0,r=s.length;t<r;t++)this._formatTrace(e,s[t])}else this._logsArray[r]=s?s.toString():"Empty log data !";return this._counterTrace++,this._logsArray[r]}dispatch(e){const t=e.type;switch(t){case Q.Message:this._dispatchMessage(e);break;case Q.Progress:this._dispatchProgress(e);break;case Q.Time:this._dispatchTime(e);break;default:throw new RangeError("Invalid switch parameter: "+t)}}_dispatchMessage(e){const t=e.level,s=e.message;switch(t){case V.Error:this.outputLevel&V.Error&&this._dispatchErrorMessage(s);break;case V.Warning:this.outputLevel&V.Warning&&this._dispatchWarningMessage(s);break;case V.Info:this.outputLevel&V.Info&&this._dispatchInfoMessage(s);break;case V.Debug:this.outputLevel&V.Debug&&this._dispatchDebugMessage(s);break;default:throw new RangeError("Invalid switch parameter: "+t)}}_dispatchErrorMessage(e){if(this.outputs&W.Console&&console.error(e),this.outputs&W.Html){const t=document.createElement("span");t.classList.add("log-error"),t.innerText=e,document.body.appendChild(t)}this.outputs,W.Toast,this.outputs,W.File,this.outputs,W.Database}_dispatchWarningMessage(e){if(this.outputs&W.Console&&console.warn(e),this.outputs&W.Html){const t=document.createElement("span");t.classList.add("log-warning"),t.innerText=e,document.body.appendChild(t)}this.outputs,W.Toast,this.outputs,W.File,this.outputs,W.Database}_dispatchInfoMessage(e){if(this.outputs&W.Console&&console.log(e),this.outputs&W.Html){const t=document.createElement("span");t.classList.add("log-info"),t.innerText=e,document.body.appendChild(t)}this.outputs,W.Toast,this.outputs,W.File,this.outputs,W.Database}_dispatchDebugMessage(e){if(this.outputs&W.Console&&console.log(e),this.outputs&W.Html){const t=document.createElement("span");t.classList.add("log-info"),t.innerText=e,document.body.appendChild(t)}this.outputs,W.Toast,this.outputs,W.File,this.outputs,W.Database}_dispatchProgress(e){const t=e.level;let s=e.message;switch(t){case V.Info:this.outputLevel&V.Info&&this._dispatchInfoProgress(s);break;case V.Debug:this.outputLevel&V.Debug&&this._dispatchDebugProgress(s);break;default:throw new RangeError("Invalid progress level parameter: "+t)}}_dispatchInfoProgress(e){if(this.outputs&W.Console&&console.log(e),this.outputs&W.Html){const t=document.createElement("span");t.classList.add("log-info"),t.innerText=e,document.body.appendChild(t)}this.outputs,W.Toast,this.outputs,W.File,this.outputs,W.Database}_dispatchDebugProgress(e){if(this.outputs&W.Console&&console.log(e),this.outputs&W.Html){const t=document.createElement("span");t.classList.add("log-info"),t.innerText=e,document.body.appendChild(t)}this.outputs,W.Toast,this.outputs,W.File,this.outputs,W.Database}_dispatchTime(e){console.log(e.message)}debug(e){this.dispatch({type:Q.Message,level:V.Debug,message:e})}log(e){this.dispatch({type:Q.Message,level:V.Info,message:e})}warn(e){this.dispatch({type:Q.Message,level:V.Warning,message:e})}error(e){this.dispatch({type:Q.Message,level:V.Error,message:e})}progress(e){if(e.preventDefault(),e.cancelable&&e.stopImmediatePropagation(),e.lengthComputable){const t=e.type,s=e.loaded,r=e.total,a=`${t}: ${Math.round(s/r*1e4)/100}% [${s}/${r}]`;this.dispatch({type:Q.Progress,level:V.Info,message:a})}}startChronoFor(e){this._timers[e]=(new Date).getTime()}stopChronoFor(e){const t=`${e} take ${(new Date).getTime()-this._timers[e]}ms.`;this.dispatch({type:Q.Time,level:V.Debug,message:t})}setOutputLevel(e){return this.outputLevel=e,this}setOutput(e){return this.outputs=e,this}}const H=new J;
/**
 * @class
 * @classdesc TKeyboardController allow single source of thruth for keyboard state checking (based on Lee Stemkoski work).
 * See TKeyboardController.k object data below for names of keys whose state can be polled
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 * @example {@lang javascript}
 * // (1) create a global variable:
 * var keyboard = new TKeyboardController();
 *
 * // (2) during main loop:
 * keyboard.update();
 *
 * // (3) check state of keys:
 * keyboard.down("A")    -- true for one update cycle after key is pressed
 * keyboard.pressed("A") -- true as long as key is being pressed
 * keyboard.up("A")      -- true for one update cycle after key is released
 */class j{static keyName(e){return null!==j.k[e]?j.k[e]:String.fromCharCode(e)}static onKeyUp(e){var t=j.keyName(e.keyCode);j.status[t]&&(j.status[t].pressed=!1)}static onKeyDown(e){var t=j.keyName(e.keyCode);j.status[t]||(j.status[t]={down:!1,pressed:!1,up:!1,updatedPreviously:!1})}constructor(e={}){document.addEventListener("keydown",j.onKeyDown,!1),document.addEventListener("keyup",j.onKeyUp,!1)}update(){for(var e in j.status)j.status[e].updatedPreviously?j.status[e].down=!1:(j.status[e].down=!0,j.status[e].pressed=!0,j.status[e].updatedPreviously=!0),j.status[e].up?delete j.status[e]:j.status[e].pressed||(j.status[e].up=!0)}down(e){return j.status[e]&&j.status[e].down}pressed(e){return j.status[e]&&j.status[e].pressed}up(e){return j.status[e]&&j.status[e].up}debug(){var e="Keys active: ";for(var t in j.status)e+=" "+t;H.log(e)}}j.k=D,j.status={};
/**
 * @class
 * @classdesc TMouseController allow single source of thruth for mouse state checking
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 * @example
 * (1) create a global variable:
 *      var keyboard = new TKeyboardController();
 * (2) during main loop:
 *       keyboard.update();
 * (3) check state of keys:
 *       keyboard.down("A")    -- true for one update cycle after key is pressed
 *       keyboard.pressed("A") -- true as long as key is being pressed
 *       keyboard.up("A")      -- true for one update cycle after key is released
 *
 *  See TKeyboardController.k object data below for names of keys whose state can be polled
 */
class K{constructor(){}}const z=e({Little:!0,Big:!1}),G=e({One:1,Two:2,Four:4,Height:8});
/**
 * @class
 * @classdesc TBinaryReader is design to perform fast binary read/write
 *
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 */
class X{constructor(e={}){const t={buffer:new ArrayBuffer(0),offset:0,length:0,endianness:z.Little,...e};this.buffer=t.buffer,this.offset=t.offset,this.length=t.length,this.endianness=t.endianness,this._updateDataView()}get buffer(){return this._buffer}set buffer(e){const t="Expect an instance of ArrayBuffer.";if(r(e))throw new TypeError("Buffer cannot be null ! "+t);if(a(e))throw new TypeError("Buffer cannot be undefined ! "+t);if(d(e))throw new TypeError(`Buffer cannot be an instance of ${e.constructor.name} ! ${t}`);this._buffer=e,this._offset=0,this._length=e.byteLength,this._updateDataView()}get offset(){return this._offset}set offset(e){const t="Expect a number.";if(r(e))throw new TypeError("Offset cannot be null ! "+t);if(a(e))throw new TypeError("Offset cannot be undefined ! "+t);if(p(e))throw new TypeError(`Offset cannot be an instance of ${e.constructor.name} ! ${t}`);this._offset=e,this._updateDataView()}get length(){return this._length}set length(e){const t="Expect a number.";if(r(e))throw new TypeError("Length cannot be null ! "+t);if(a(e))throw new TypeError("Length cannot be undefined ! "+t);if(p(e))throw new TypeError(`Length cannot be an instance of ${e.constructor.name} ! ${t}`);this._length=e,this._updateDataView()}get endianness(){return this._endianness}set endianness(e){const t="Expect a boolean.";if(r(e))throw new TypeError("Endianness cannot be null ! "+t);if(a(e))throw new TypeError("Endianness cannot be undefined ! "+t);if(n(e))throw new TypeError(`Endianness cannot be an instance of ${e.constructor.name} ! ${t}`);this._endianness=e}setBuffer(e,t,s){return this.buffer=e,this.offset=t||0,this.length=s||e.byteLength,this}setOffset(e){return this.offset=e,this}setLength(e){return this.length=e,this}setEndianess(e){return this.endianness=e,this}_getAndUpdateOffsetBy(e){const t=this._offset;return this._offset+=e,t}_updateDataView(){this._dataView=new DataView(this._buffer,this._offset,this._length)}isEndOfFile(){return this._offset===this._length}skipOffsetTo(e){return this._offset=e,this}skipOffsetOf(e){return this._offset+=e,this}getBoolean(){return 1==(1&this.getUint8())}getBooleanArray(e){const t=[];for(let s=0;s<e;s++)t.push(this.getBoolean());return t}getInt8(){return this._dataView.getInt8(this._getAndUpdateOffsetBy(G.One))}getInt8Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt8());return t}getUint8(){return this._dataView.getUint8(this._getAndUpdateOffsetBy(G.One))}getUint8Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint8());return t}getInt16(){return this._dataView.getInt16(this._getAndUpdateOffsetBy(G.Two),this._endianness)}getInt16Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt16());return t}getUint16(){return this._dataView.getUint16(this._getAndUpdateOffsetBy(G.Two),this._endianness)}getUint16Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint16());return t}getInt32(){return this._dataView.getInt32(this._getAndUpdateOffsetBy(G.Four),this._endianness)}getInt32Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt32());return t}getUint32(){return this._dataView.getUint32(this._getAndUpdateOffsetBy(G.Four),this._endianness)}getUint32Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint32());return t}getInt64(){let e=null,t=null;return this._endianness===z.Little?(e=this.getUint32(),t=this.getUint32()):(t=this.getUint32(),e=this.getUint32()),2147483648&t?(t=4294967295&~t,e=4294967295&~e,4294967295===e&&(t=t+1&4294967295),e=e+1&4294967295,-(4294967296*t+e)):4294967296*t+e}getInt64Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getInt64());return t}getUint64(){let e=null,t=null;return this._endianness===z.Little?(e=this.getUint32(),t=this.getUint32()):(t=this.getUint32(),e=this.getUint32()),4294967296*t+e}getUint64Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getUint64());return t}getFloat32(){return this._dataView.getFloat32(this._getAndUpdateOffsetBy(G.Four),this._endianness)}getFloat32Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getFloat32());return t}getFloat64(){return this._dataView.getFloat64(this._getAndUpdateOffsetBy(G.Height),this._endianness)}getFloat64Array(e){const t=[];for(let s=0;s<e;s++)t.push(this.getFloat64());return t}getChar(){return String.fromCharCode(this.getUint8())}getString(e,t=!0){let s="",r=null;for(let t=0;t<e;t++)r=this.getUint8(),0!==r&&(s+=String.fromCharCode(r));return t&&(s=s.trim()),s}getArrayBuffer(e){const t=this._getAndUpdateOffsetBy(e);return this._dataView.buffer.slice(t,t+e)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TDataBaseManager
 * @classdesc The base class of database managers. Give the basic interface about database call.
 *
 * @requires {@link HttpVerb}
 * @requires {@link ResponseType}
 * @requires {@link HttpStatusCode}
 * @requires {@link TOrchestrator}
 * @requires {@link TStore}
 *
 * @example Todo
 *
 */const Y=new class{constructor(){this._id=0}get id(){return this._id+=1,this._id}},Z=e({CreateOne:0,CreateMany:1,ReadOne:2,ReadMany:3,ReadWhere:4,ReadAll:5,UpdateOne:6,UpdateMany:7,UpdateWhere:8,UpdateAll:9,DeleteOne:10,DeleteMany:11,DeleteWhere:12,DeleteAll:13});class ee{static get requestId(){return ee._requestId++,ee._requestId}constructor(e={}){const t={basePath:"/",responseType:k.Json,bunchSize:500,requestAggregationTime:200,requestsConcurrency:6,logger:H,...e};this.basePath=t.basePath,this.responseType=t.responseType,this.bunchSize=t.bunchSize,this.requestAggregationTime=t.requestAggregationTime,this.requestsConcurrency=t.requestsConcurrency,this.logger=t.logger,this._cache=new x,this._waitingQueue=[],this._aggregateQueue=[],this._requestQueue=[],this._processQueue=[],this._aggregationTimeoutId=null,this._idToRequest=[]}get basePath(){return this._basePath}set basePath(e){if(r(e))throw new TypeError("Base path cannot be null ! Expect a non empty string.");if(a(e))throw new TypeError("Base path cannot be undefined ! Expect a non empty string.");if(g(e))throw new TypeError(`Base path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(_(e))throw new TypeError("Base path cannot be empty ! Expect a non empty string.");if(v(e))throw new TypeError("Base path cannot contain only whitespace ! Expect a non empty string.");this._basePath=e}get responseType(){return this._responseType}set responseType(e){if(r(e))throw new Error("TDataBaseManager: responseType cannot be null !");if(r(e))throw new TypeError("Response type cannot be null ! Expect a non empty string.");if(a(e))throw new TypeError("Response type cannot be undefined ! Expect a non empty string.");this._responseType=e}get bunchSize(){return this._bunchSize}set bunchSize(e){if(r(e))throw new TypeError("Bunch size cannot be null ! Expect a positive number.");if(a(e))throw new TypeError("Bunch size cannot be undefined ! Expect a positive number.");if(p(e))throw new TypeError(`Bunch size cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(!f(e))throw new TypeError("Bunch size cannot be lower or equal to zero ! Expect a positive number.");this._bunchSize=e}get requestAggregationTime(){return this._requestAggregationTime}set requestAggregationTime(e){if(r(e))throw new TypeError("Requests aggregation time cannot be null ! Expect a positive number.");if(a(e))throw new TypeError("Requests aggregation time cannot be undefined ! Expect a positive number.");if(p(e))throw new TypeError(`Requests aggregation time cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(y(e))throw new TypeError("Requests aggregation time cannot be lower or equal to zero ! Expect a positive number.");this._requestAggregationTime=e}get requestsConcurrency(){return this._requestsConcurrency}set requestsConcurrency(e){if(r(e))throw new TypeError("Minimum of simultaneous request cannot be null ! Expect a positive number.");if(a(e))throw new TypeError("Minimum of simultaneous request cannot be undefined ! Expect a positive number.");if(p(e))throw new TypeError(`Minimum of simultaneous request cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(m(e)||y(e))throw new TypeError("Minimum of simultaneous request cannot be lower or equal to zero ! Expect a positive number.");this._requestsConcurrency=e}get logger(){return this._logger}set logger(e){if(r(e))throw new TypeError("Progress manager cannot be null ! Expect an instance of TProgressManager.");if(a(e))throw new TypeError("Progress manager cannot be undefined ! Expect an instance of TProgressManager.");if(!(e instanceof J))throw new TypeError(`Progress manager cannot be an instance of ${e.constructor.name} ! Expect an instance of TProgressManager.`);this._logger=e}setBasePath(e){return this.basePath=e,this}setResponseType(e){return this.responseType=e,this}setBunchSize(e){return this.bunchSize=e,this}setRequestAggregationTime(e){return this.requestAggregationTime=e,this}setRequestsConcurrency(e){return this.requestsConcurrency=e,this}setLogger(e){return this.logger=e,this}aggregateQueue(){clearTimeout(this._aggregationTimeoutId),this._aggregationTimeoutId=setTimeout(()=>{const e=this._idToRequest;let t=[];for(let s=e.length-1;s>=0;s--)t.push(e.pop()),t.length!==this._bunchSize&&0!==s||(this._requestQueue.push({_id:"readMany_"+Y.id,_timeStart:new Date,_type:Z.ReadMany,method:U.Read.value,url:this._basePath,data:{ids:t},responseType:this._responseType}),t=[]);this.processQueue.call(this)},this._requestAggregationTime)}processQueue(){for(;this._requestQueue.length>0&&this._processQueue.length<this._requestsConcurrency;){const o=this._requestQueue.pop();this._processQueue.push(o);const n=new XMLHttpRequest;n.onloadstart=e.bind(this),n.onload=this._onLoad.bind(this,o,this._onEnd.bind(this,o,o.onLoad),this._onProgress.bind(this,o.onProgress),this._onError.bind(this,o,o.onError)),n.onloadend=t.bind(this),n.onprogress=this._onProgress.bind(this,o.onProgress),n.onreadystatechange=s.bind(this),n.onabort=r.bind(this),n.onerror=this._onError.bind(this,o,o.onError),n.ontimeout=a.bind(this),n.open(o.method,o.url,!0),n.setRequestHeader("Content-Type","application/json"),n.setRequestHeader("Accept","application/json"),n.responseType=o.responseType.value;const i=o.data&&o.responseType===k.Json?JSON.stringify(o.data):o.data;n.send(i)}function e(e){this.logger.progress(e)}function t(e){this.logger.progress(e)}function s(e){this.logger.debug(e)}function r(e){this.logger.error(e)}function a(e){this.logger.error(e)}}create(e,t,s,r){w(e)&&b(e)?E(e)?this._createOne(e[0],t,s,r):this._createMany(e,t,s,r):l(e)&&T(e)?this._createOne(e,t,s,r):r("TDataBaseManager.create: Invalid data type, expect object or array of objects.")}read(e,s,r,a,o){t(e)&&O(e)&&R(e)?this._readOne(e,s,r,a,o):w(e)&&b(e)?E(e)?this._readOne(e[0],s,r,a,o):this._readMany(e,s,r,a,o):l(e)?A(e)?this._readAll(s,r,a,o):this._readWhere(e,s,r,a,o):o("TDataBaseManager.read: Invalid data type, expect string, object or array of objects.")}update(e,s,r,a,n){M(s)?n("TDataBaseManager.update: Update data cannot be null or undefined !"):o(s)?n("TDataBaseManager.update: Invalid update data type. Expect an object."):t(e)&&O(e)&&R(e)?this._updateOne(e,s,r,a,n):w(e)&&b(e)?E(e)?this._updateOne(e[0],s,r,a,n):this._updateMany(e,s,r,a,n):l(e)?A(e)?this._updateAll(s,r,a,n):this._updateWhere(e,s,r,a,n):n("TDataBaseManager.update: Invalid data type, expect string, object or array of objects.")}delete(e,s,r,a){t(e)&&O(e)&&R(e)?this._deleteOne(e,s,r,a):w(e)&&b(e)?E(e)?this._deleteOne(e[0],s,r,a):this._deleteMany(e,s,r,a):l(e)?A(e)?this._deleteAll(s,r,a):this._deleteWhere(e,s,r,a):a("TDataBaseManager.delete: Invalid data type, expect null, string, object or array of objects.")}_onLoad(e,t,s,r,a){const o=a.target,n=o.status,i=o.response,u=o.responseType;switch(n){case I.Ok.value:this._dispatchResponse(i,u,t,s,r);break;case I.NonAuthoritativeInformation.value:case I.NoContent.value:case I.ResetContent.value:case I.PartialContent.value:case I.MultiStatus.value:case I.AlreadyReported.value:case I.ContentDifferent.value:case I.IMUsed.value:case I.MultipleChoices.value:case I.MovedPermanently.value:case I.Found.value:case I.SeeOther.value:case I.NotModified.value:case I.UseProxy.value:case I.Unused.value:case I.TemporaryRedirect.value:case I.PermanentRedirect.value:case I.TooManyRedirects.value:case I.BadRequest.value:case I.Unauthorized.value:case I.PaymentRequired.value:case I.Forbidden.value:case I.NotFound.value:case I.MethodNotAllowed.value:case I.NotAcceptable.value:case I.ProxyAuthenticationRequired.value:case I.RequestTimeOut.value:case I.Conflict.value:case I.Gone.value:case I.LengthRequired.value:case I.PreconditionFailed.value:case I.RequestEntityTooLarge.value:case I.RequestRangeUnsatisfiable.value:case I.ExpectationFailed.value:case I.ImATeapot.value:case I.BadMapping.value:case I.UnprocessableEntity.value:case I.Locked.value:case I.MethodFailure.value:case I.UnorderedCollection.value:case I.UpgradeRequired.value:case I.PreconditionRequired.value:case I.TooManyRequests.value:case I.RequestHeaderFieldsTooLarge.value:case I.NoResponse.value:case I.RetryWith.value:case I.BlockedByWindowsParentalControls.value:case I.UnavailableForLegalReasons.value:case I.UnrecoverableError.value:case I.SSLCertificateError.value:case I.SSLCertificateRequired.value:case I.HTTPRequestSentToHTTPSPort.value:case I.ClientClosedRequest.value:case I.InternalServerError.value:case I.NotImplemented.value:case I.BadGateway.value:case I.ServiceUnavailable.value:case I.GatewayTimeOut.value:case I.HTTPVersionNotSupported.value:case I.VariantAlsoNegotiates.value:case I.InsufficientStorage.value:case I.LoopDetected.value:case I.BandwidthLimitExceeded.value:case I.NotExtended.value:case I.NetworkAuthenticationRequired.value:case I.UnknownError.value:case I.WebServerIsDown.value:case I.ConnectionTimedOut.value:case I.OriginIsUnreachable.value:case I.ATimeoutOccured.value:case I.SSLHandshakeFailed.value:case I.InvalidSSLCertificate.value:case I.RailgunError.value:r(i);break;default:throw new RangeError("Unmanaged HttpStatusCode: "+n)}}_onProgress(e,t){q(this.logger)?this.logger.progress(t,e):q(e)&&e(t)}_onError(e,t,s){this._closeRequest(e),q(this.logger)?this.logger.error(s,t):q(t)&&t(s)}_onEnd(e,t,s){const r=e._type;switch(r){case Z.ReadOne:case Z.ReadMany:this._updateCache(s),this._updateWaitingQueue();break;case Z.ReadWhere:case Z.ReadAll:this._updateCache(s),this._updateWaitingQueue(),t(s);break;case Z.CreateOne:case Z.CreateMany:case Z.UpdateOne:case Z.UpdateMany:case Z.UpdateWhere:case Z.UpdateAll:case Z.DeleteOne:case Z.DeleteMany:case Z.DeleteWhere:case Z.DeleteAll:t(s);break;default:throw new RangeError("Invalid request type: "+r)}this._closeRequest(e)}_dispatchResponse(e,t,s,r,a){switch(t){case k.ArrayBuffer.value:this._onArrayBuffer(e,s,r,a);break;case k.Blob.value:this._onBlob(e,s,r,a);break;case k.Json.value:this._onJson(e,s,r,a);break;case k.DOMString.value:case k.Default.value:this._onText(e,s,r,a);break;default:throw new Error("Unknown response type: "+t)}}_closeRequest(e){if(this._processQueue.splice(this._processQueue.indexOf(e),1),Window.Itee&&Window.Itee.Debug){const t=(new Date).valueOf()-e._timeStart.valueOf(),s=`${this.constructor.name} close request [${e._id}] on ${t}ms.Waiting queue: `+this._waitingQueue.length+"Request queue: "+this._requestQueue.length+"Process queue: "+this._processQueue.length+"==========================";this.logger.debug(s)}this.processQueue()}_retrieveCachedValues(e){let t={},s=[],a=[];for(let o=0,n=e.length;o<n;o++){const n=e[o],i=this._cache.get(n);q(i)?t[n]=i:r(i)?s.push(n):a.push(n)}return{results:t,underRequest:s,toRequest:a}}_updateCache(e){if(r(e))throw new TypeError("Data cannot be null ! Expect an array of object.");if(a(e))throw new TypeError("Data cannot be undefined ! Expect an array of object.");let t={};if(w(e))for(let s in e)t[e[s]._id]=e[s];else t=e;for(let[e,s]of Object.entries(t)){const t=this._cache.get(e);r(t)?this._cache.add(e,s,!0):a(t)?(this.logger.warn("Cache was not pre-allocated with null value."),this._cache.add(e,s)):this.logger.error("Cached value already exist !")}}_updateWaitingQueue(){const e=0===this._requestQueue.length&&0===this._processQueue.length;for(let t=this._waitingQueue.length-1;t>=0;t--){const s=this._waitingQueue[t];for(let e=s.underRequest.length-1;e>=0;e--){const t=s.underRequest[e],r=this._cache.get(t);M(r)||(s.results[t]=r,s.underRequest.splice(s.underRequest.indexOf(t),1))}const r=0===s.underRequest.length;r?(this._waitingQueue.splice(t,1),s.onLoadCallback(s.results)):!r&&e&&(this.logger.warn("Incomplet demand but empty request/process queue"),this._waitingQueue.splice(t,1),s.onLoadCallback(s.results))}}_onArrayBuffer(e,t,s,r){}_onBlob(e,t,s,r){}_onJson(e,t,s,r){}_onText(e,t,s,r){}_createOne(e,t,s,r){this._requestQueue.push({_id:"createOne_"+Y.id,_timeStart:new Date,_type:Z.CreateOne,method:U.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_createMany(e,t,s,r){this._requestQueue.push({_id:"createMany_"+Y.id,_timeStart:new Date,_type:Z.CreateMany,method:U.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_readOne(e,t,s,r,a){const o=this._retrieveCachedValues([e]);if(0===o.toRequest.length)0===o.underRequest.length?s(o.results):(o.onLoadCallback=s,o.onProgressCallback=r,o.onErrorCallback=a,this._waitingQueue.push(o));else{o.onLoadCallback=s,o.onProgressCallback=r,o.onErrorCallback=a,this._waitingQueue.push(o);try{this._cache.add(e,null),o.underRequest.push(e),o.toRequest.splice(o.toRequest.indexOf(e),1)}catch(e){this.logger.error(e)}this._idToRequest.push(e),this.aggregateQueue()}}_readMany(e,t,s,r,a){const o=this._retrieveCachedValues(e);if(0===o.toRequest.length)0===o.underRequest.length?s(o.results):(o.onLoadCallback=s,o.onProgressCallback=r,o.onErrorCallback=a,this._waitingQueue.push(o));else{o.onLoadCallback=s,o.onProgressCallback=r,o.onErrorCallback=a,this._waitingQueue.push(o);const e=o.toRequest;let t=void 0;for(let s=e.length-1;s>=0;s--){t=e[s];try{this._cache.add(t,null),o.underRequest.push(t),o.toRequest.splice(o.toRequest.indexOf(t),1)}catch(e){this.logger.error(e)}this._idToRequest.push(t)}this.aggregateQueue()}}_readWhere(e,t,s,r,a){this._requestQueue.push({_id:"readWhere_"+Y.id,_timeStart:new Date,_type:Z.ReadWhere,method:U.Read.value,url:this._basePath,data:{query:e,projection:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_readAll(e,t,s,r){this._requestQueue.push({_id:"readAll_"+Y.id,_timeStart:new Date,_type:Z.ReadAll,method:U.Read.value,url:this._basePath,data:{query:{},projection:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_updateOne(e,t,s,r,a){this._requestQueue.push({_id:"updateOne_"+Y.id,_timeStart:new Date,_type:Z.UpdateOne,method:U.Update.value,url:`${this._basePath}/${e}`,data:{update:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_updateMany(e,t,s,r,a){this._requestQueue.push({_id:"updateMany_"+Y.id,_timeStart:new Date,_type:Z.UpdateMany,method:U.Update.value,url:this._basePath,data:{ids:e,update:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_updateWhere(e,t,s,r,a){this._requestQueue.push({_id:"updateWhere_"+Y.id,_timeStart:new Date,_type:Z.UpdateWhere,method:U.Update.value,url:this._basePath,data:{query:e,update:t},onLoad:s,onProgress:r,onError:a,responseType:this._responseType}),this.processQueue()}_updateAll(e,t,s,r){this._requestQueue.push({_id:"updateAll_"+Y.id,_timeStart:new Date,_type:Z.UpdateAll,method:U.Update.value,url:this._basePath,data:{query:{},update:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteOne(e,t,s,r){this._requestQueue.push({_id:"deleteOne_"+Y.id,_timeStart:new Date,_type:Z.DeleteOne,method:U.Delete.value,url:`${this._basePath}/${e}`,data:null,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteMany(e,t,s,r){this._requestQueue.push({_id:"deleteMany_"+Y.id,_timeStart:new Date,_type:Z.DeleteMany,method:U.Delete.value,url:this._basePath,data:{ids:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteWhere(e,t,s,r){this._requestQueue.push({_id:"deleteWhere_"+Y.id,_timeStart:new Date,_type:Z.DeleteWhere,method:U.Delete.value,url:this._basePath,data:{query:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteAll(e,t,s){this._requestQueue.push({_id:"deleteAll_"+Y.id,_timeStart:new Date,_type:Z.DeleteAll,method:U.Delete.value,url:this._basePath,data:{query:{}},onLoad:e,onProgress:t,onError:s,responseType:this._responseType}),this.processQueue()}}ee._requestId=0,ee._requests={waitingQueue:{},toProcess:{create:{},read:{},update:{},delete:{}},underProcess:{create:{},read:{},update:{},delete:{}},processed:{create:{},read:{},update:{},delete:{}}};const te=e({Number:0,String:1,Uuid:2});class se{constructor(e=te.Number,t=null){this.type=e,this.base=t,this._counter=0}get type(){return this._type}set type(e){if(r(e))throw new Error("Type cannot be null ! Expect an value from TIdFactoryType enum: "+te.types());if(a(e))throw new Error("Type cannot be undefined ! Expect an value from TIdFactoryType enum: "+te.types());if(!te.includes(e))throw new Error("Invalide type ! Expect an value from TIdFactoryType enum: "+te.types());this._type=e}get base(){return this._base}set base(e){if(a(e))throw new Error("Base cannot be undefined ! Expect an instance of Object3D.");if(this._type===te.Number&&p(e))throw new Error("Invalide Base ! It does not match the type.");if(this._type===te.String&&g(e))throw new Error("Invalide Base ! It does not match the type.");this._base=e}setType(e){return this.type=e,this}setBase(e){return this.base=e,this}createId(){return this._base+this._counter++}}var re="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),ae=new Uint8Array(16);function oe(){if(!re)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return re(ae)}var ne=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function ie(e){return"string"==typeof e&&ne.test(e)}for(var ue=[],le=0;le<256;++le)ue.push((le+256).toString(16).substr(1));function he(e,t,s){var r=(e=e||{}).random||(e.rng||oe)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){s=s||0;for(var a=0;a<16;++a)t[s+a]=r[a];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=(ue[e[t+0]]+ue[e[t+1]]+ue[e[t+2]]+ue[e[t+3]]+"-"+ue[e[t+4]]+ue[e[t+5]]+"-"+ue[e[t+6]]+ue[e[t+7]]+"-"+ue[e[t+8]]+ue[e[t+9]]+"-"+ue[e[t+10]]+ue[e[t+11]]+ue[e[t+12]]+ue[e[t+13]]+ue[e[t+14]]+ue[e[t+15]]).toLowerCase();if(!ie(s))throw TypeError("Stringified UUID is invalid");return s}(r)}class ce{static isWebAPIMessage=!0;constructor(e){this._id=he(),this.type=e}get id(){return this._id}get type(){return this._type}set type(e){if(g(e))throw new ReferenceError("WebAPIMessage type cannot be null or undefined !");if(_(e))throw new TypeError("WebAPIMessage type cannot be an empty string !");this._type=e}toJSON(){return{id:this.id,type:this.type}}}class de extends ce{static isWebAPIMessageData=!0;constructor(e){super("_data"),this.data=e}toJSON(){return{...super.toJSON(),data:JSON.stringify(this.data)}}}class pe extends ce{static isWebAPIMessageError=!0;constructor(e){super("_error"),this.message=e.message,this.stack=e.stack}toJSON(){return{...super.toJSON(),message:this.message,stack:this.stack}}}class ge extends ce{static isWebAPIMessageProgress=!0;constructor(e=0,t=0){super("_progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}class _e extends ce{static isWebAPIMessageReady=!0;constructor(){super("_ready")}}class ve extends ce{static isWebApiMessageResponse=!0;constructor(e,t){super("_response"),this.request=e,this.result=t}get request(){return this._request}set request(e){r(e)||a(e)||(this._request=e)}get result(){return this._result}set result(e){this._result=e}toJSON(){return{...super.toJSON(),request:this.request,result:this.result}}}class fe{constructor(e={}){const t={allowedOrigins:[],targetOrigin:"",requestTimeout:2e3,...e};this._origin=window.location.origin,this._responses=new Map,window.addEventListener("message",this._onMessage.bind(this),!1),this.allowedOrigins=t.allowedOrigins,this.targetOrigin=t.targetOrigin,this.requestTimeout=t.requestTimeout,this._broadCastReadyMessage()}get allowedOrigins(){return this._allowedOrigins}set allowedOrigins(e){this._allowedOrigins=[];const t=Array.isArray(e)?e:[e];for(let e=0,s=t.length;e<s;e++){const s=t[e];this._allowedOrigins.push({id:s.id,uri:s.uri,methods:s.methods,window:this._getOriginWindow(s.uri),messageQueue:[],isReady:!1})}}get targetOrigin(){return this._targetOrigin}set targetOrigin(e){const t="Expect a valid string origin id !";if(a(e))throw new ReferenceError(`[${this._origin}]: Target origin cannot be undefined. ${t}`);if(r(e))throw new ReferenceError(`[${this._origin}]: Target origin cannot be null. ${t}`);if(g(e))throw new ReferenceError(`[${this._origin}]: Target origin is invalid. ${t}`);if(!this.allowedOrigins.map(e=>e.id).includes(e))throw new ReferenceError(`[${this._origin}]: Provided target origin is not contain in current allowedOrigins. ${t}`);this._targetOrigin=e}get requestTimeout(){return this._requestTimeout}set requestTimeout(e){if(r(e))throw new ReferenceError(`[${this._origin}]: The request timeout cannot be null, expect to be 0 or a positive number.`);if(a(e))throw new ReferenceError(`[${this._origin}]: The request timeout cannot be undefined, expect to be 0 or a positive number.`);if(p(e))throw new ReferenceError(`[${this._origin}]: The request timeout expect to be 0 or a positive number.`);if(y(e)&&!m(e))throw new ReferenceError(`[${this._origin}]: The request timeout expect to be 0 or a positive number.`);this._requestTimeout=e}setAllowedOrigins(e){return this.allowedOrigins=e,this}setTargetOrigin(e){return this.targetOrigin=e,this}setRequestTimeout(e){return this.requestTimeout=e,this}_isInIframe(){try{return window.self!==window.top}catch(e){return!0}}_isNotAllowedForAllMethods(e){return-1===e.methods.indexOf("*")}_isNotAllowedMethod(e,t){return-1===e.methods.indexOf(t)}_methodNotExist(e){return M(this[e])}_getAllowedOriginById(e){return Object.values(this._allowedOrigins).find(t=>t.id===e)}_getAllowedOriginByURI(e){return Object.values(this._allowedOrigins).find(t=>t.uri===e)}_getOriginWindow(e){let t=null;if(this._isInIframe())t=window.parent;else{const s=document.getElementsByTagName("iframe"),r=Array.from(s).find(t=>t.src.includes(e));M(r)?(console.warn(`[${this._origin}]: Unable to find iframe for [${e}] URI !`),t=null):t=r.contentWindow}return t}_onMessage(e){const t=this._getAllowedOriginByURI(e.origin);if(void 0!==t){null===t.window&&(this._getAllowedOriginById(t.id).window=e.source);try{this._dispatchMessageFrom(t,JSON.parse(e.data))}catch(e){this.postErrorTo(t.id,e)}}else console.warn(`[${this._origin}]: An unallowed origin [${e.origin}] try to access the web api.`)}_dispatchMessageFrom(e,t){if(M(t))throw new ReferenceError(`[${this._origin}]: Message cannot be null or undefined ! Expect a json object.`);const s=t.type;"_ready"===s?(console.log(`[${this._origin}]: Recieve '_ready' message from [${e.uri}].`),this.onReadyFrom(e,t)):"_progress"===s?(console.log(`[${this._origin}]: Recieve '_progress' message from [${e.uri}].`),this.onProgressFrom(e,t)):"_error"===s?(console.log(`[${this._origin}]: Recieve '_error' message from [${e.uri}].`),this.onErrorFrom(e,t)):"_response"===s?(console.log(`[${this._origin}]: Recieve '_response' message from [${e.uri}].`),this.onResponseFrom(e,t)):"_request"===s?(console.log(`[${this._origin}]: Recieve '_request' message from [${e.uri}].`),this.onRequestFrom(e,t)):(console.log(`[${this._origin}]: Recieve 'custom' message from [${e.uri}].`),this.onMessageFrom(e,t))}onReadyFrom(e,t){if(!e.isReady){e.isReady=!0;const t=new _e;this.postMessageTo(e.id,t,!0)}const s=e.messageQueue;for(let t=s.length-1;t>=0;t--)this.postMessageTo(e.id,s.shift())}onRequestFrom(e,t){const s=t.method;if(this._isNotAllowedForAllMethods(e)&&this._isNotAllowedMethod(e,s))throw new Error(`[${this._origin}]: Origin [${e}] try to access an unallowed method named ${s}.`);if(this._methodNotExist(s))throw new ReferenceError(`[${this._origin}]: Origin [${e}] try to access an unexisting method named ${s}.`);const r=t.parameters;let a;try{const e=this[s](...r);a=new ve(t,e)}catch(e){a=new ve(t,e)}this.postMessageTo(e.id,a)}onResponseFrom(e,t){this._responses.set(t.request.id,t)}onProgressFrom(e,t){}onErrorFrom(e,t){}onMessageFrom(e,t){}_broadCastReadyMessage(){const e=new _e,t=setInterval(()=>{const s=this.allowedOrigins;s.map(e=>e.isReady).includes(!1)?Object.values(s).forEach(t=>{t.isReady||t.isUnreachable||(q(t.silent)?C(t.silent)?this.postMessageTo(t.id,e,!0):t.isReady=!0:this.postMessageTo(t.id,e,!0))}):clearInterval(t)},1e3)}postErrorTo(e,t){let s=null;s=t.isWebAPIMessageError?t:new pe(t),this.postMessageTo(e,s.toJSON())}postProgressTo(e,t){let s=null;s=t.isWebAPIMessageProgress?t:new ge(t.loaded,t.total),this.postMessageTo(e,s.toJSON())}postDataTo(e,t){let s=null;s=t.isWebAPIMessageData?t:new de(t),this.postMessageTo(e,s.toJSON())}postRequestTo(e,t){let s=0;return new Promise((r,a)=>{try{this.postMessageTo(e,t);const o=setInterval(()=>{if(this._responses.has(t.id)){const e=this._responses.get(t.id);this._responses.delete(t.id),clearInterval(o),e&&"error"===e.type?a(e):r(e)}else s>=this.requestTimeout?(clearInterval(o),a(new Error(`[${this._origin}]: Request Timeout: ${t}`))):s+=200},200)}catch(e){a(e)}})}postMessageTo(e,t,s=!1){if(M(e))throw new ReferenceError(`[${this._origin}]: Unable to post message to null or undefined origin id !`);if(M(t))throw new ReferenceError(`[${this._origin}]: Unable to post null or undefined message !`);const r=this._getAllowedOriginById(e);if(M(r))throw new ReferenceError(`[${this._origin}]: Unable to retrieved origin with id: ${e}`);try{s||r.isReady?s&&!r.window?(console.error(`[${this._origin}]: Origin "${r.id}" is unreachable !`),r.isUnreachable=!0,r.messageQueue.push(t)):(console.log(`[${this._origin}]: Send message of type [${t.type}] to  [${r.uri}]`),r.window.postMessage(JSON.stringify(t),r.uri)):(console.warn(`[${this._origin}]: Origin "${r.id}" is not ready yet !`),r.messageQueue.push(t))}catch(e){console.error(e)}}}class ye extends ce{static isWebAPIMessageRequest=!0;constructor(e,t=[]){super("_request"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){r(e)||a(e)||g(e)||(this._method=e)}get parameters(){return this._parameters}set parameters(e){i(e)||(this._parameters=e)}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}}class me{static isWorkerMessage=!0;constructor(e){this.type=e}get type(){return this._type}set type(e){this._type=e}toJSON(){return{type:this.type}}}class we extends me{static isWorkerMessageData=!0;constructor(e,t){super(e),this.buffer=t}toJSON(){return{...super.toJSON(),buffer:this.buffer}}}class be extends me{static isWorkerMessageError=!0;constructor(e){super("error"),this.message=e.message,this.stack=e.stack}toJSON(){return{...super.toJSON(),message:this.message,stack:this.stack}}}class Ee extends me{static isWorkerMessageProgess=!0;constructor(e=0,t=0){super("progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}class Te{postProgress(e){e.isWorkerMessageProgess?postMessage(e.toJSON()):postMessage(new Ee(e.loaded,e.total).toJSON())}postError(e){e.isWorkerMessageError?postMessage(e.toJSON()):postMessage(new be(e).toJSON())}postData(e,t){if(w(t))postMessage(new we(e,t).toJSON(),[...t]);else{if(!P(t))throw new TypeError(`AbstractWorker.postData: Unable to post data of type [${e}].`);postMessage(new we(e,t).toJSON(),[t])}}onMessage(e){if(M(e))return this.postError(new Error("Message event cannot be null or undefined !")),!0;const t=e.data;if(M(t))return this.postError(new Error("Message data cannot be null or undefined !")),!0;const s=t.type;if(M(s))return this.postError(new Error("Message data type cannot be null or undefined !")),!0;if("methodCall"===t.type){const e=t.method;if(M(e))return this.postError(new Error('Message of type "methodCall" cannot have null, undefined or empty name !')),!0;if(g(e))return this.postError(new Error('Message of type "methodCall" expect name to be a string !')),!0;if(_(e))return this.postError(new Error('Message of type "methodCall" expect name to be a non empty string !')),!0;const s=t.parameters||[];return i(s)?(this.postError(new Error('Message of type "methodCall" expect parameters to be an array !')),!0):(this._invoke(e,s),!0)}}_invoke(e,t=[]){try{const s=this[e](...t);s&&postMessage({type:e,result:s})}catch(e){this.postError(e)}}}class Oe extends me{static isWorkerMessageMethodCall=!0;constructor(e,t=[]){super("methodCall"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){r(e)||a(e)||g(e)||(this._method=e)}get parameters(){return this._parameters}set parameters(e){i(e)||(this._parameters=e)}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}}export{fe as AbstractWebAPI,Te as AbstractWorker,G as Byte,H as DefaultLogger,z as Endianness,S as FileFormat,I as HttpStatusCode,U as HttpVerb,D as Keys,L as MimeType,N as Mouse,k as ResponseType,$ as TAbstractFactory,X as TBinaryReader,F as TCloningFactory,ee as TDataBaseManager,se as TIdFactory,te as TIdFactoryType,B as TInstancingFactory,j as TKeyboardController,J as TLogger,K as TMouseController,x as TStore,ce as WebAPIMessage,de as WebAPIMessageData,pe as WebAPIMessageError,ge as WebAPIMessageProgress,_e as WebAPIMessageReady,ye as WebAPIMessageRequest,ve as WebApiMessageResponse,me as WorkerMessage,we as WorkerMessageData,be as WorkerMessageError,Oe as WorkerMessageMethodCall,Ee as WorkerProgessMessage};
//# sourceMappingURL=itee-client.esm.min.js.map
