this.Itee=this.Itee||{},this.Itee.Core=function(e,t,s,r){"use strict";const i=t.toEnum({Asc:{value:"asc"},Dae:{value:"dae"},Dbf:{value:"dbf"},Fbx:{value:"fbx"},Mtl:{value:"mtl"},Json:{value:"json"},Obj:{value:"obj"},Shp:{value:"shp"},Stl:{value:"stl"}}),n=t.toEnum({Continue:{value:100},SwitchingProtocols:{value:101},Processing:{value:102},Ok:{value:200},Created:{value:201},Accepted:{value:202},NonAuthoritativeInformation:{value:203},NoContent:{value:204},ResetContent:{value:205},PartialContent:{value:206},MultiStatus:{value:207},AlreadyReported:{value:208},ContentDifferent:{value:210},IMUsed:{value:226},MultipleChoices:{value:300},MovedPermanently:{value:301},Found:{value:302},SeeOther:{value:303},NotModified:{value:304},UseProxy:{value:305},Unused:{value:306},TemporaryRedirect:{value:307},PermanentRedirect:{value:308},TooManyRedirects:{value:310},BadRequest:{value:400},Unauthorized:{value:401},PaymentRequired:{value:402},Forbidden:{value:403},NotFound:{value:404},MethodNotAllowed:{value:405},NotAcceptable:{value:406},ProxyAuthenticationRequired:{value:407},RequestTimeOut:{value:408},Conflict:{value:409},Gone:{value:410},LengthRequired:{value:411},PreconditionFailed:{value:412},RequestEntityTooLarge:{value:413},RequestRangeUnsatisfiable:{value:416},ExpectationFailed:{value:417},ImATeapot:{value:418},BadMapping:{value:421},UnprocessableEntity:{value:422},Locked:{value:423},MethodFailure:{value:424},UnorderedCollection:{value:425},UpgradeRequired:{value:426},PreconditionRequired:{value:428},TooManyRequests:{value:429},RequestHeaderFieldsTooLarge:{value:431},NoResponse:{value:444},RetryWith:{value:449},BlockedByWindowsParentalControls:{value:450},UnavailableForLegalReasons:{value:451},UnrecoverableError:{value:456},SSLCertificateError:{value:495},SSLCertificateRequired:{value:496},HTTPRequestSentToHTTPSPort:{value:497},ClientClosedRequest:{value:499},InternalServerError:{value:500},NotImplemented:{value:501},BadGateway:{value:502},ServiceUnavailable:{value:503},GatewayTimeOut:{value:504},HTTPVersionNotSupported:{value:505},VariantAlsoNegotiates:{value:506},InsufficientStorage:{value:507},LoopDetected:{value:508},BandwidthLimitExceeded:{value:509},NotExtended:{value:510},NetworkAuthenticationRequired:{value:511},UnknownError:{value:520},WebServerIsDown:{value:521},ConnectionTimedOut:{value:522},OriginIsUnreachable:{value:523},ATimeoutOccured:{value:524},SSLHandshakeFailed:{value:525},InvalidSSLCertificate:{value:526},RailgunError:{value:527}}),a=t.toEnum({Create:{value:"PUT"},Read:{value:"POST"},Update:{value:"PATCH"},Delete:{value:"DELETE"}}),o=t.toEnum({BACKSPACE:{value:8},TAB:{value:9},ENTER:{value:13},SHIFT:{value:16},CTRL:{value:17},ALT:{value:18},PAUSE:{value:19},CAPS_LOCK:{value:20},ESCAPE:{value:27},SPACE:{value:32},PAGE_UP:{value:33},PAGE_DOWN:{value:34},END:{value:35},HOME:{value:36},LEFT_ARROW:{value:37},UP_ARROW:{value:38},RIGHT_ARROW:{value:39},DOWN_ARROW:{value:40},INSERT:{value:45},DELETE:{value:46},ZERO:{value:48},ONE:{value:49},TWO:{value:50},THREE:{value:51},FOUR:{value:52},FIVE:{value:53},SIX:{value:54},SEVEN:{value:55},HEIGHT:{value:56},NINE:{value:57},A:{value:65},B:{value:66},C:{value:67},D:{value:68},E:{value:69},F:{value:70},G:{value:71},H:{value:72},I:{value:73},J:{value:74},K:{value:75},L:{value:76},M:{value:77},N:{value:78},O:{value:79},P:{value:80},Q:{value:81},R:{value:82},S:{value:83},T:{value:84},U:{value:85},V:{value:86},W:{value:87},X:{value:88},Y:{value:89},Z:{value:90},LEFT_WINDOW_KEY:{value:91},RIGHT_WINDOW_KEY:{value:92},SELECT_KEY:{value:93},NUMPAD_0:{value:96},NUMPAD_1:{value:97},NUMPAD_2:{value:98},NUMPAD_3:{value:99},NUMPAD_4:{value:100},NUMPAD_5:{value:101},NUMPAD_6:{value:102},NUMPAD_7:{value:103},NUMPAD_8:{value:104},NUMPAD_9:{value:105},MULTIPLY:{value:106},ADD:{value:107},SUBSTRACT:{value:109},DECIMAL_POINT:{value:110},DIVIDE:{value:111},F1:{value:112},F2:{value:113},F3:{value:114},F4:{value:115},F5:{value:116},F6:{value:117},F7:{value:118},F8:{value:119},F9:{value:120},F10:{value:121},F11:{value:122},F12:{value:123},NUM_LOCK:{value:144},SCROLL_LOCK:{value:145},SEMICOLON:{value:186},EQUAL:{value:187},COMMA:{value:188},DASH:{value:189},PERIODE:{value:190},SLASH:{value:191},GRAVE_ACCENT:{value:192},OPEN_SQUARE_BRACKET:{value:219},BACKSLASH:{value:220},CLOSE_SQUARE_BRACKET:{value:221},SINGLE_QUOTE:{value:222}}),u=t.toEnum({}),l=t.toEnum({Wheel:{value:-1},Left:{value:0},Middle:{value:1},Right:{value:2}}),h=t.toEnum({ArrayBuffer:{value:"arraybuffer"},Blob:{value:"blob"},Document:{value:"document"},Json:{value:"json"},DOMString:{value:"text"},Default:{value:""}});
/**
	 * @class
	 * @classdesc TStore is a simple javascript object whose purpose is to store some ket/value data to future usage. It could be enable/disable.
	 *
	 * @example {@lang javascript}
	 * var cache = new TCache()
	 * cache.add( 'foo', 'bar' )
	 * TLogger.log( cache.get('foo') ) // 'bar'
	 *
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */
class d{static _validate(e,t){for(let r=0,i=t.length;r<i;r++){let i=t[r];if(!i.validator(e)){const t=i.error;throw s.isString(t)?new TypeError(t):s.isFunction(t)?new TypeError(t(e)):new TypeError(`${e} is invalid.`)}}}constructor(e={}){const t={collection:{},allowOverride:!1,keyValidators:[],valueValidators:[],...e};this.collection=t.collection,this.allowOverride=t.allowOverride,this.keyValidators=t.keyValidators,this.valueValidators=t.valueValidators}get collection(){return this._collection}set collection(e){const t="Collection",r="Expect an object.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotObject(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._collection=e}get allowOverride(){return this._allowOverride}set allowOverride(e){const t="Allow override",r="Expect a boolean.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotBoolean(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._allowOverride=e}get keyValidators(){return this._keyValidators}set keyValidators(e){const t="Keys validators",r="Expect an array of TValidator or an empty array.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotArray(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._keyValidators=e}get valueValidators(){return this._valueValidators}set valueValidators(e){const t="Values validators",r="Expect an array of TValidator or an empty array.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotArray(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._valueValidators=e}get keys(){return Object.keys(this._collection)}get values(){return Object.values(this._collection)}setCollection(e){return this.collection=e,this}setAllowOverride(e){return this.allowOverride=e,this}setKeyValidators(e){return this.keyValidators(e),this}setValueValidators(e){return this.valueValidators(e),this}add(e,t,s=!1){if(this.contain(e)&&!this._allowOverride&&!s)throw new TypeError(`Item with key (${e}) already exist in collection !`);return d._validate(e,this._keyValidators),d._validate(t,this._valueValidators),this._collection[e]=t,this}contain(e){return s.isNotUndefined(this._collection[e])}get(e){return this._collection[e]}remove(e){return delete this._collection[e],this}clear(){return this._collection={},this}}
/**
	 * @class
	 * @classdesc The abstract class to create factory
	 * @abstract
	 * @extends TStore
	 *
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */class c extends d{constructor(e={}){super({...e})}create(e,...t){}}
/**
	 * @class
	 * @classdesc The TCloningFactory is a kind a factory that performe instanciation by cloning a base instance.
	 * @extends TAbstractFactory
	 *
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */
/**
	 * @class
	 * @classdesc TKeyboardController allow single source of thruth for keyboard state checking (based on Lee Stemkoski work).
	 * See TKeyboardController.k object data below for names of keys whose state can be polled
	 *
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 * @example {@lang javascript}
	 * // (1) create a global variable:
	 * var keyboard = new TKeyboardController();
	 *
	 * // (2) during main loop:
	 * keyboard.update();
	 *
	 * // (3) check state of keys:
	 * keyboard.down("A")    -- true for one update cycle after key is pressed
	 * keyboard.pressed("A") -- true as long as key is being pressed
	 * keyboard.up("A")      -- true for one update cycle after key is released
	 */
class f{static keyName(e){return null!==f.k[e]?f.k[e]:String.fromCharCode(e)}static onKeyUp(e){var t=f.keyName(e.keyCode);f.status[t]&&(f.status[t].pressed=!1)}static onKeyDown(e){var t=f.keyName(e.keyCode);f.status[t]||(f.status[t]={down:!1,pressed:!1,up:!1,updatedPreviously:!1})}constructor(e={}){document.addEventListener("keydown",f.onKeyDown,!1),document.addEventListener("keyup",f.onKeyUp,!1)}update(){for(var e in f.status)f.status[e].updatedPreviously?f.status[e].down=!1:(f.status[e].down=!0,f.status[e].pressed=!0,f.status[e].updatedPreviously=!0),f.status[e].up?delete f.status[e]:f.status[e].pressed||(f.status[e].up=!0)}down(e){return f.status[e]&&f.status[e].down}pressed(e){return f.status[e]&&f.status[e].pressed}up(e){return f.status[e]&&f.status[e].up}debug(){var e="Keys active: ";for(var t in f.status)e+=" "+t;r.DefaultLogger.log(e)}}f.k=o,f.status={};class g{constructor(e,t=null){this.targetCtor=e,this.serializer=t}to(e,t,s={}){}from(e,t={}){return new this.targetCtor}}const p=t.toEnum({Little:!0,Big:!1}),_=t.toEnum({One:1,Two:2,Four:4,Eight:8});
/**
	 * @class
	 * @classdesc TBinaryReader is design to perform fast binary read/write
	 *
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */
class y{constructor(e={}){const t={buffer:new ArrayBuffer(0),offset:0,length:0,endianness:p.Little,...e};this.buffer=t.buffer,this.endianness=t.endianness,this._bits={buffer:null,offset:0,length:0},this._updateDataView()}get buffer(){return this._buffer}set buffer(e){const t="Buffer",r="Expect an instance of ArrayBuffer.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotArrayBuffer(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._buffer=e,this._offset=0,this._length=e.byteLength,this._updateDataView()}get offset(){return this._offset}set offset(e){const t="Offset",r="Expect a number.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotNumber(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._offset=e,this._updateDataView()}get length(){return this._length}set length(e){const t="Length",r="Expect a number.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotNumber(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._length=e,this._updateDataView()}get endianness(){return this._endianness}set endianness(e){const t="Endianness",r="Expect a boolean.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotBoolean(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._endianness=e}setBuffer(e,t,s){return this.buffer=e,this.offset=t||0,this.length=s||e.byteLength,this}setOffset(e){return this.offset=e,this}setLength(e){return this.length=e,this}setEndianness(e){return this.endianness=e,this}_getAndUpdateOffsetBy(e){const t=this._offset;return this._offset+=e,t}_updateDataView(){this._dataView=new DataView(this._buffer,this._offset,this._length)}isEndOfFile(){return this._offset===this._length}_isNullBitBuffer(){return null===this._bits.buffer}_nextBit(){this._bits.offset+=1}_isEndOfBitBuffer(){return this._bits.offset===this._bits.length}_isOutOfRangeBitOffset(e){return e>this._bits.length}_readBit8(){this._bits.buffer=this.getUint8(),this._bits.length=8,this._bits.offset=0}_readBit16(){this._bits.buffer=this.getUint16(),this._bits.length=16,this._bits.offset=0}_readBit32(){this._bits.buffer=this.getUint32(),this._bits.length=32,this._bits.offset=0}_getBitAt(e){return this._bits.buffer&1<<e?1:0}_resetBits(){this._bits.buffer=null,this._bits.length=0,this._bits.offset=0}skipBitOffsetTo(e){if(this._isNullBitBuffer())if(e<=8)this._readBit8();else if(8<e&&e<=16)this._readBit16();else{if(!(16<e&&e<=32))throw new RangeError("You cannot skip more than 32 bits. Please use skipOffsetOf instead !");this._readBit32()}else if(this._isOutOfRangeBitOffset(e))throw new RangeError("Bit offset is out of range of the current bits field.");this._bits.offset=e,this._isEndOfBitBuffer()&&this._resetBits()}skipBitOffsetOf(e){this.skipBitOffsetTo(this._bits.offset+e)}getBit8(e=!0){this._isNullBitBuffer()&&this._readBit8();const t=this._getBitAt(this._bits.offset);return e&&(this._nextBit(),this._isEndOfBitBuffer()&&this._resetBits()),t}getBits8(e,t=!0){const s=this._bits.offset;let r=0;for(let s=0;s<e;s++)r|=s===e-1?this.getBit8(t)<<s:this.getBit8()<<s;return t||this.skipBitOffsetTo(s),r}getBit16(e=!0){this._isNullBitBuffer()&&this._readBit16();const t=this._getBitAt(this._bits.offset);return e&&(this._nextBit(),this._isEndOfBitBuffer()&&this._resetBits()),t}getBits16(e,t=!0){const s=this._bits.offset;let r=0;for(let s=0;s<e;s++)r|=s===e-1?this.getBit16(t)<<s:this.getBit16()<<s;return t||this.skipBitOffsetTo(s),r}getBit32(e=!0){this._isNullBitBuffer()&&this._readBit32();const t=this._getBitAt(this._bits.offset);return e&&(this._nextBit(),this._isEndOfBitBuffer()&&this._resetBits()),t}getBits32(e,t=!0){const s=this._bits.offset;let r=0;for(let s=0;s<e;s++)r|=s===e-1?this.getBit32(t)<<s:this.getBit32()<<s;return t||this.skipBitOffsetTo(s),r}skipOffsetTo(e){this._offset=e}skipOffsetOf(e){this._offset+=e}getBoolean(e=!0){return!(1&~this.getUint8(e))}getBooleanArray(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getBoolean());return t||(this._offset=s),r}getInt8(e=!0){const t=e?this._getAndUpdateOffsetBy(_.One):this._offset;return this._dataView.getInt8(t)}getInt8Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt8());return t||(this._offset=s),r}getUint8(e=!0){const t=e?this._getAndUpdateOffsetBy(_.One):this._offset;return this._dataView.getUint8(t)}getUint8Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint8());return t||(this._offset=s),r}getInt16(e=!0){const t=e?this._getAndUpdateOffsetBy(_.Two):this._offset;return this._dataView.getInt16(t,this._endianness)}getInt16Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt16());return t||(this._offset=s),r}getUint16(e=!0){const t=e?this._getAndUpdateOffsetBy(_.Two):this._offset;return this._dataView.getUint16(t,this._endianness)}getUint16Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint16());return t||(this._offset=s),r}getInt32(e=!0){const t=e?this._getAndUpdateOffsetBy(_.Four):this._offset;return this._dataView.getInt32(t,this._endianness)}getInt32Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt32());return t||(this._offset=s),r}getUint32(e=!0){const t=e?this._getAndUpdateOffsetBy(_.Four):this._offset;return this._dataView.getUint32(t,this._endianness)}getUint32Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint32());return t||(this._offset=s),r}getInt64(e=!0){let t=null,s=null;if(this._endianness===p.Little)if(e)t=this.getUint32(),s=this.getUint32();else{const e=this._offset;t=this.getUint32(),s=this.getUint32(),this.skipOffsetTo(e)}else if(e)s=this.getUint32(),t=this.getUint32();else{const e=this._offset;s=this.getUint32(),t=this.getUint32(),this.skipOffsetTo(e)}return 2147483648&s?(s=4294967295&~s,t=4294967295&~t,4294967295===t&&(s=s+1&4294967295),t=t+1&4294967295,-(4294967296*s+t)):4294967296*s+t}getInt64Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getInt64());return t||(this._offset=s),r}getUint64(e=!0){let t=null,s=null;if(this._endianness===p.Little)if(e)t=this.getUint32(),s=this.getUint32();else{const e=this._offset;t=this.getUint32(),s=this.getUint32(),this.skipOffsetTo(e)}else if(e)s=this.getUint32(),t=this.getUint32();else{const e=this._offset;s=this.getUint32(),t=this.getUint32(),this.skipOffsetTo(e)}return 4294967296*s+t}getUint64Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getUint64());return t||(this._offset=s),r}getFloat32(e=!0){const t=e?this._getAndUpdateOffsetBy(_.Four):this._offset;return this._dataView.getFloat32(t,this._endianness)}getFloat32Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getFloat32());return t||(this._offset=s),r}getFloat64(e=!0){const t=e?this._getAndUpdateOffsetBy(_.Eight):this._offset;return this._dataView.getFloat64(t,this._endianness)}getFloat64Array(e,t=!0){const s=this._offset,r=[];for(let t=0;t<e;t++)r.push(this.getFloat64());return t||(this._offset=s),r}getChar(e=!0){return String.fromCharCode(this.getUint8(e))}getString(e,t=!0){const s=this._offset;let r="";for(let t=0;t<e;t++)r+=String.fromCharCode(this.getUint8());return t||(this._offset=s),r}getArrayBuffer(e){const t=this._getAndUpdateOffsetBy(e);return this._dataView.buffer.slice(t,t+e)}}class w extends g{constructor(e){super(null,e)}to(e,t,s={}){}from(e,t={}){return null}}class b extends g{constructor(e){super(null,e)}to(e,t,s={}){}from(e,t={}){}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */class m extends g{constructor(e){super(Boolean,e)}to(e,t,s={}){e.setBoolean(t)}from(e,t={}){return e.getBoolean()}}class v extends g{constructor(e){super(Number,e)}to(e,t,s={}){e.setFloat64(t)}from(e,t={}){return e.getFloat64()}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */class E extends g{constructor(e){super(String,e)}to(e,t,s={}){e.setUint32(t.length),e.setString(t)}from(e,t={}){const s=e.getUint32();return e.getString(s)}}class T extends g{constructor(e){super(Date,e)}to(e,t,s={}){const r=t.toUTCString();this.serializer._serialize(r)}from(e,t={}){const s=this.serializer._deserialize();return new Date(s)}}class O extends g{constructor(e){super(RegExp,e)}from(e,t={}){return new RegExp}}class A extends g{constructor(e){super(Array,e)}to(e,t,s={}){const r=t.length;e.setUint32(r);for(let e of t)this.serializer._serialize(e)}from(e,t={}){const s=e.getUint32(),r=[];for(let e=0;e<s;e++){const e=this.serializer._deserialize();r.push(e)}return r}}class N extends g{constructor(e,t){super(e||Object,t)}to(e,t,s={}){const r=Object.getOwnPropertyDescriptors(t),i=Object.entries(r).filter(([e,t])=>t.writable&&t.enumerable);e.setUint8(i.length);for(let[t,s]of i)e.setUint32(t.length),e.setString(t),this.serializer._serialize(s.value)}from(e,t={}){const s=super.from(e,t),r=e.getUint8();for(let t=0;t<r;t++){const t=e.getUint32();s[e.getString(t)]=this.serializer._deserialize()}return s}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */class R{get buffer(){return this._buffer}set buffer(e){const t="Buffer",r="Expect an instance of ArrayBuffer.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotArrayBuffer(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._buffer=e,this._offset=0,this._length=e.byteLength,this._updateDataView()}get offset(){return this._offset}set offset(e){const t="Offset",r="Expect a number.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotNumber(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._offset=e,this._updateDataView()}get length(){return this._length}set length(e){const t="Length",r="Expect a number.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotNumber(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._length=e,this._updateDataView()}get endianness(){return this._endianness}set endianness(e){const t="Endianness",r="Expect a boolean.";if(s.isNull(e))throw new TypeError(`${t} cannot be null ! ${r}`);if(s.isUndefined(e))throw new TypeError(`${t} cannot be undefined ! ${r}`);if(s.isNotBoolean(e))throw new TypeError(`${t} cannot be an instance of ${e.constructor.name} ! ${r}`);this._endianness=e}constructor({buffer:e=new ArrayBuffer(1024),endianness:t=p.Little}={}){this.buffer=e,this.endianness=t,this._updateDataView()}setBuffer(e,t,s){return this.buffer=e,this.offset=t||0,this.length=s||e.byteLength,this}setOffset(e){return this.offset=e,this}setLength(e){return this.length=e,this}setEndianess(e){return this.endianness=e,this}_getAndUpdateOffsetBy(e){const t=this._offset;this._offset+=e;const s=this._buffer.byteLength;if(this._offset>=s){const e=new ArrayBuffer(s+1024),t=new DataView(e,0,e.byteLength);for(let e=0;e<s;e++)t.setUint8(e,this._dataView.getUint8(e));this._buffer=e,this._dataView=t}return t}_updateDataView(){this._dataView=new DataView(this._buffer,this._offset,this._length)}isEndOfFile(){return this._offset===this._length}_iterArray(e,t,s){const r=this._offset;for(let s of e)t(s);s||(this._offset=r)}skipOffsetTo(e){this._offset=e}skipOffsetOf(e){this._offset+=e}setBoolean(e,t=!0){this.setUint8(!(1&~e),t)}setBooleanArray(e,t=!0){this._iterArray(e,this.setBoolean.bind(this),t)}setInt8(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.One):this._offset;this._dataView.setInt8(s,e)}setInt8Array(e,t=!0){this._iterArray(e,this.setInt8.bind(this),t)}setUint8(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.One):this._offset;this._dataView.setUint8(s,e)}setUint8Array(e,t=!0){this._iterArray(e,this.setUint8.bind(this),t)}setInt16(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.Two):this._offset;this._dataView.setInt16(s,e,this._endianness)}setInt16Array(e,t=!0){this._iterArray(e,this.setInt16.bind(this),t)}setUint16(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.Two):this._offset;this._dataView.setUint16(s,e,this._endianness)}setUint16Array(e,t=!0){this._iterArray(e,this.setUint16.bind(this),t)}setInt32(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.Four):this._offset;this._dataView.setInt32(s,e,this._endianness)}setInt32Array(e,t=!0){this._iterArray(e,this.setInt32.bind(this),t)}setUint32(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.Four):this._offset;this._dataView.setUint32(s,e,this._endianness)}setUint32Array(e,t=!0){this._iterArray(e,this.setUint32.bind(this),t)}setInt64(){throw new Error("Not implemented, sorry... any help is welcome !")}setInt64Array(e,t=!0){this._iterArray(e,this.setInt64.bind(this),t)}setUint64(){throw new Error("Not implemented, sorry... any help is welcome !")}setUint64Array(e,t=!0){this._iterArray(e,this.setUint64.bind(this),t)}setFloat32(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.Four):this._offset;this._dataView.setFloat32(s,e,this._endianness)}setFloat32Array(e,t=!0){this._iterArray(e,this.setFloat32.bind(this),t)}setFloat64(e,t=!0){const s=t?this._getAndUpdateOffsetBy(_.Eight):this._offset;this._dataView.setFloat64(s,e,this._endianness)}setFloat64Array(e,t=!0){this._iterArray(e,this.setFloat64.bind(this),t)}setChar(e,t=!0){this.setUint8(e.charCodeAt(0),t)}setString(e,t=!0){this._iterArray(e,this.setChar.bind(this),t)}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */const U={Null:0,Undefined:1,Boolean:2,Number:3,String:4,Date:5,RegEx:6,Array:7,Object:8,UserDefined:255};class B{constructor(){this.reader=new y,this.writer=new R,this.converters=new Map([[U.Null,new w(this)],[U.Undefined,new b(this)],[U.Boolean,new m(this)],[U.Number,new v(this)],[U.String,new E(this)],[U.Date,new T(this)],[U.RegEx,new O(this)],[U.Array,new A(this)],[U.Object,new N(null,this)],[U.UserDefined,new Map([])]])}addConverter(e){e.serializer=this;this.converters.get(U.UserDefined).set(e.targetCtor.name,e)}removeConverter(e){this.converters.get(U.UserDefined).remove(e.targetCtor.name)}serialize(e,t={}){this.writer.buffer=new ArrayBuffer(1024);return this._serialize(e).slice(0,this.writer.offset)}_serialize(e){const t=this._getBinaryTypeOf(e);this.writer.setUint8(t);let s=this.converters.get(t);if(t===U.UserDefined){const t=e.constructor,r=t.name;this.writer.setUint8(r.length),this.writer.setString(r),s.has(r)||(console.info(`Need to create new converter for ${r} serialization. The serialization of this class could be optimized using it's own dedicated serializer that extend TBinaryConverter and add it to serializer converters.`),s.set(r,new N(t,this))),s=s.get(r)}return s.to(this.writer,e),this.writer.buffer}_getBinaryTypeOf(e){let t;return s.isNull(e)?t=U.Null:s.isUndefined(e)?t=U.Undefined:s.isBoolean(e)?t=U.Boolean:s.isNumber(e)?t=U.Number:s.isString(e)?t=U.String:!function(e){switch(typeof e){case"number":return!0;case"string":return!isNaN(Date.parse(e));case"object":return e instanceof Date&&!isNaN(e.getTime());default:return!1}}(e)?t=e instanceof RegExp?U.RegEx:s.isArray(e)?U.Array:s.isObject(e)?U.Object:U.UserDefined:t=U.Date,t}deserialize(e){if(!s.isNotDefined(e)&&0!==e.length)return this.reader.setBuffer(e,0,e.length),this._deserialize()}_deserialize(){const e=this.reader.getUint8();let t=this.converters.get(e);if(e===U.UserDefined){const e=this.reader.getUint8(),s=this.reader.getString(e);t=t.has(s)?t.get(s):null}if(!t)throw new TypeError(`Unable to found appropriate converter for deserialize type: ${e}`);return t.from(this.reader)}}const S=new B;
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 *
	 * @class TDataBaseManager
	 * @classdesc The base class of database managers. Give the basic interface about database call.
	 *
	 * @requires {@link HttpVerb}
	 * @requires {@link ResponseType}
	 * @requires {@link HttpStatusCode}
	 * @requires {@link TOrchestrator}
	 * @requires {@link TStore}
	 *
	 * @example Todo
	 *
	 */const M=new class{constructor(){this._id=0}get id(){return this._id+=1,this._id}},$=t.toEnum({CreateOne:0,CreateMany:1,ReadOne:2,ReadMany:3,ReadWhere:4,ReadAll:5,UpdateOne:6,UpdateMany:7,UpdateWhere:8,UpdateAll:9,DeleteOne:10,DeleteMany:11,DeleteWhere:12,DeleteAll:13});class q{static get requestId(){return q._requestId++,q._requestId}constructor(e={}){const t={basePath:"/",responseType:h.Json,bunchSize:500,requestAggregationTime:200,requestsConcurrency:6,logger:r.DefaultLogger,...e};this.basePath=t.basePath,this.responseType=t.responseType,this.bunchSize=t.bunchSize,this.requestAggregationTime=t.requestAggregationTime,this.requestsConcurrency=t.requestsConcurrency,this.logger=t.logger,this._cache=new d,this._waitingQueue=[],this._aggregateQueue=[],this._requestQueue=[],this._processQueue=[],this._aggregationTimeoutId=null,this._idToRequest=[]}get basePath(){return this._basePath}set basePath(e){if(s.isNull(e))throw new TypeError("Base path cannot be null ! Expect a non empty string.");if(s.isUndefined(e))throw new TypeError("Base path cannot be undefined ! Expect a non empty string.");if(s.isNotString(e))throw new TypeError(`Base path cannot be an instance of ${e.constructor.name} ! Expect a non empty string.`);if(s.isEmptyString(e))throw new TypeError("Base path cannot be empty ! Expect a non empty string.");if(s.isBlankString(e))throw new TypeError("Base path cannot contain only whitespace ! Expect a non empty string.");this._basePath=e}get responseType(){return this._responseType}set responseType(e){if(s.isNull(e))throw new Error("TDataBaseManager: responseType cannot be null !");if(s.isNull(e))throw new TypeError("Response type cannot be null ! Expect a non empty string.");if(s.isUndefined(e))throw new TypeError("Response type cannot be undefined ! Expect a non empty string.");this._responseType=e}get bunchSize(){return this._bunchSize}set bunchSize(e){if(s.isNull(e))throw new TypeError("Bunch size cannot be null ! Expect a positive number.");if(s.isUndefined(e))throw new TypeError("Bunch size cannot be undefined ! Expect a positive number.");if(s.isNotNumber(e))throw new TypeError(`Bunch size cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(!s.isNumberPositive(e))throw new TypeError("Bunch size cannot be lower or equal to zero ! Expect a positive number.");this._bunchSize=e}get requestAggregationTime(){return this._requestAggregationTime}set requestAggregationTime(e){if(s.isNull(e))throw new TypeError("Requests aggregation time cannot be null ! Expect a positive number.");if(s.isUndefined(e))throw new TypeError("Requests aggregation time cannot be undefined ! Expect a positive number.");if(s.isNotNumber(e))throw new TypeError(`Requests aggregation time cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(s.isNumberNegative(e))throw new TypeError("Requests aggregation time cannot be lower or equal to zero ! Expect a positive number.");this._requestAggregationTime=e}get requestsConcurrency(){return this._requestsConcurrency}set requestsConcurrency(e){if(s.isNull(e))throw new TypeError("Minimum of simultaneous request cannot be null ! Expect a positive number.");if(s.isUndefined(e))throw new TypeError("Minimum of simultaneous request cannot be undefined ! Expect a positive number.");if(s.isNotNumber(e))throw new TypeError(`Minimum of simultaneous request cannot be an instance of ${e.constructor.name} ! Expect a positive number.`);if(s.isZero(e)||s.isNumberNegative(e))throw new TypeError("Minimum of simultaneous request cannot be lower or equal to zero ! Expect a positive number.");this._requestsConcurrency=e}get logger(){return this._logger}set logger(e){if(s.isNull(e))throw new TypeError("Progress manager cannot be null ! Expect an instance of TProgressManager.");if(s.isUndefined(e))throw new TypeError("Progress manager cannot be undefined ! Expect an instance of TProgressManager.");if(!(e instanceof r.TLogger))throw new TypeError(`Progress manager cannot be an instance of ${e.constructor.name} ! Expect an instance of TProgressManager.`);this._logger=e}setBasePath(e){return this.basePath=e,this}setResponseType(e){return this.responseType=e,this}setBunchSize(e){return this.bunchSize=e,this}setRequestAggregationTime(e){return this.requestAggregationTime=e,this}setRequestsConcurrency(e){return this.requestsConcurrency=e,this}setLogger(e){return this.logger=e,this}aggregateQueue(){clearTimeout(this._aggregationTimeoutId),this._aggregationTimeoutId=setTimeout(()=>{const e=this._idToRequest;let t=[];for(let s=e.length-1;s>=0;s--)t.push(e.pop()),t.length!==this._bunchSize&&0!==s||(this._requestQueue.push({_id:`readMany_${M.id}`,_timeStart:new Date,_type:$.ReadMany,method:a.Read.value,url:this._basePath,data:{ids:t},responseType:this._responseType}),t=[]);this.processQueue.call(this)},this._requestAggregationTime)}processQueue(){for(;this._requestQueue.length>0&&this._processQueue.length<this._requestsConcurrency;){const n=this._requestQueue.pop();this._processQueue.push(n);const a=new XMLHttpRequest;a.onloadstart=e.bind(this),a.onload=this._onLoad.bind(this,n,this._onEnd.bind(this,n,n.onLoad),this._onProgress.bind(this,n.onProgress),this._onError.bind(this,n,n.onError)),a.onloadend=t.bind(this),a.onprogress=this._onProgress.bind(this,n.onProgress),a.onreadystatechange=s.bind(this),a.onabort=r.bind(this),a.onerror=this._onError.bind(this,n,n.onError),a.ontimeout=i.bind(this),a.open(n.method,n.url,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Accept","application/json"),a.responseType=n.responseType.value;const o=n.data&&n.responseType===h.Json?JSON.stringify(n.data):n.data;a.send(o)}function e(e){this.logger.progress(e)}function t(e){this.logger.progress(e)}function s(e){this.logger.debug(e)}function r(e){this.logger.error(e)}function i(e){this.logger.error(e)}}create(e,t,r,i){s.isArray(e)&&s.isNotEmptyArray(e)?s.isArrayOfSingleElement(e)?this._createOne(e[0],t,r,i):this._createMany(e,t,r,i):s.isObject(e)&&s.isNotEmptyObject(e)?this._createOne(e,t,r,i):i("TDataBaseManager.create: Invalid data type, expect object or array of objects.")}read(e,t,r,i,n){s.isString(e)&&s.isNotEmptyString(e)&&s.isNotBlankString(e)?this._readOne(e,t,r,i,n):s.isArray(e)&&s.isNotEmptyArray(e)?s.isArrayOfSingleElement(e)?this._readOne(e[0],t,r,i,n):this._readMany(e,t,r,i,n):s.isObject(e)?s.isEmptyObject(e)?this._readAll(t,r,i,n):this._readWhere(e,t,r,i,n):n("TDataBaseManager.read: Invalid data type, expect string, object or array of objects.")}update(e,t,r,i,n){s.isNotDefined(t)?n("TDataBaseManager.update: Update data cannot be null or undefined !"):s.isNotObject(t)?n("TDataBaseManager.update: Invalid update data type. Expect an object."):s.isString(e)&&s.isNotEmptyString(e)&&s.isNotBlankString(e)?this._updateOne(e,t,r,i,n):s.isArray(e)&&s.isNotEmptyArray(e)?s.isArrayOfSingleElement(e)?this._updateOne(e[0],t,r,i,n):this._updateMany(e,t,r,i,n):s.isObject(e)?s.isEmptyObject(e)?this._updateAll(t,r,i,n):this._updateWhere(e,t,r,i,n):n("TDataBaseManager.update: Invalid data type, expect string, object or array of objects.")}delete(e,t,r,i){s.isString(e)&&s.isNotEmptyString(e)&&s.isNotBlankString(e)?this._deleteOne(e,t,r,i):s.isArray(e)&&s.isNotEmptyArray(e)?s.isArrayOfSingleElement(e)?this._deleteOne(e[0],t,r,i):this._deleteMany(e,t,r,i):s.isObject(e)?s.isEmptyObject(e)?this._deleteAll(t,r,i):this._deleteWhere(e,t,r,i):i("TDataBaseManager.delete: Invalid data type, expect null, string, object or array of objects.")}_onLoad(e,t,s,r,i){const a=i.target,o=a.status,u=a.response,l=a.responseType;switch(o){case n.Ok.value:this._dispatchResponse(u,l,t,s,r);break;case n.NonAuthoritativeInformation.value:case n.NoContent.value:case n.ResetContent.value:case n.PartialContent.value:case n.MultiStatus.value:case n.AlreadyReported.value:case n.ContentDifferent.value:case n.IMUsed.value:case n.MultipleChoices.value:case n.MovedPermanently.value:case n.Found.value:case n.SeeOther.value:case n.NotModified.value:case n.UseProxy.value:case n.Unused.value:case n.TemporaryRedirect.value:case n.PermanentRedirect.value:case n.TooManyRedirects.value:case n.BadRequest.value:case n.Unauthorized.value:case n.PaymentRequired.value:case n.Forbidden.value:case n.NotFound.value:case n.MethodNotAllowed.value:case n.NotAcceptable.value:case n.ProxyAuthenticationRequired.value:case n.RequestTimeOut.value:case n.Conflict.value:case n.Gone.value:case n.LengthRequired.value:case n.PreconditionFailed.value:case n.RequestEntityTooLarge.value:case n.RequestRangeUnsatisfiable.value:case n.ExpectationFailed.value:case n.ImATeapot.value:case n.BadMapping.value:case n.UnprocessableEntity.value:case n.Locked.value:case n.MethodFailure.value:case n.UnorderedCollection.value:case n.UpgradeRequired.value:case n.PreconditionRequired.value:case n.TooManyRequests.value:case n.RequestHeaderFieldsTooLarge.value:case n.NoResponse.value:case n.RetryWith.value:case n.BlockedByWindowsParentalControls.value:case n.UnavailableForLegalReasons.value:case n.UnrecoverableError.value:case n.SSLCertificateError.value:case n.SSLCertificateRequired.value:case n.HTTPRequestSentToHTTPSPort.value:case n.ClientClosedRequest.value:case n.InternalServerError.value:case n.NotImplemented.value:case n.BadGateway.value:case n.ServiceUnavailable.value:case n.GatewayTimeOut.value:case n.HTTPVersionNotSupported.value:case n.VariantAlsoNegotiates.value:case n.InsufficientStorage.value:case n.LoopDetected.value:case n.BandwidthLimitExceeded.value:case n.NotExtended.value:case n.NetworkAuthenticationRequired.value:case n.UnknownError.value:case n.WebServerIsDown.value:case n.ConnectionTimedOut.value:case n.OriginIsUnreachable.value:case n.ATimeoutOccured.value:case n.SSLHandshakeFailed.value:case n.InvalidSSLCertificate.value:case n.RailgunError.value:r(u);break;default:throw new RangeError(`Unmanaged HttpStatusCode: ${o}`)}}_onProgress(e,t){s.isDefined(this.logger)?this.logger.progress(t,e):s.isDefined(e)&&e(t)}_onError(e,t,r){this._closeRequest(e),s.isDefined(this.logger)?this.logger.error(r,t):s.isDefined(t)&&t(r)}_onEnd(e,t,s){const r=e._type;switch(r){case $.ReadOne:case $.ReadMany:this._updateCache(s),this._updateWaitingQueue();break;case $.ReadWhere:case $.ReadAll:this._updateCache(s),this._updateWaitingQueue(),t(s);break;case $.CreateOne:case $.CreateMany:case $.UpdateOne:case $.UpdateMany:case $.UpdateWhere:case $.UpdateAll:case $.DeleteOne:case $.DeleteMany:case $.DeleteWhere:case $.DeleteAll:t(s);break;default:throw new RangeError(`Invalid request type: ${r}`)}this._closeRequest(e)}_dispatchResponse(e,t,s,r,i){switch(t){case h.ArrayBuffer.value:this._onArrayBuffer(e,s,r,i);break;case h.Blob.value:this._onBlob(e,s,r,i);break;case h.Json.value:this._onJson(e,s,r,i);break;case h.DOMString.value:case h.Default.value:this._onText(e,s,r,i);break;default:throw new Error(`Unknown response type: ${t}`)}}_closeRequest(e){if(this._processQueue.splice(this._processQueue.indexOf(e),1),Window.Itee&&Window.Itee.Debug){const t=(new Date).valueOf()-e._timeStart.valueOf(),s=`${this.constructor.name} close request [${e._id}] on ${t}ms.Waiting queue: ${this._waitingQueue.length}Request queue: ${this._requestQueue.length}Process queue: ${this._processQueue.length}==========================`;this.logger.debug(s)}this.processQueue()}_retrieveCachedValues(e){let t={},r=[],i=[];for(let n=0,a=e.length;n<a;n++){const a=e[n],o=this._cache.get(a);s.isDefined(o)?t[a]=o:s.isNull(o)?r.push(a):i.push(a)}return{results:t,underRequest:r,toRequest:i}}_updateCache(e){if(s.isNull(e))throw new TypeError("Data cannot be null ! Expect an array of object.");if(s.isUndefined(e))throw new TypeError("Data cannot be undefined ! Expect an array of object.");let t={};if(s.isArray(e))for(let s in e)t[e[s]._id]=e[s];else t=e;for(let[e,r]of Object.entries(t)){const t=this._cache.get(e);s.isNull(t)?this._cache.add(e,r,!0):s.isUndefined(t)?(this.logger.warn("Cache was not pre-allocated with null value."),this._cache.add(e,r)):this.logger.error("Cached value already exist !")}}_updateWaitingQueue(){const e=0===this._requestQueue.length&&0===this._processQueue.length;for(let t=this._waitingQueue.length-1;t>=0;t--){const r=this._waitingQueue[t];for(let e=r.underRequest.length-1;e>=0;e--){const t=r.underRequest[e],i=this._cache.get(t);s.isNotDefined(i)||(r.results[t]=i,r.underRequest.splice(r.underRequest.indexOf(t),1))}const i=0===r.underRequest.length;i?(this._waitingQueue.splice(t,1),r.onLoadCallback(r.results)):!i&&e&&(this.logger.warn("Incomplet demand but empty request/process queue"),this._waitingQueue.splice(t,1),r.onLoadCallback(r.results))}}_onArrayBuffer(e,t,s,r){}_onBlob(e,t,s,r){}_onJson(e,t,s,r){}_onText(e,t,s,r){}_createOne(e,t,s,r){this._requestQueue.push({_id:`createOne_${M.id}`,_timeStart:new Date,_type:$.CreateOne,method:a.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_createMany(e,t,s,r){this._requestQueue.push({_id:`createMany_${M.id}`,_timeStart:new Date,_type:$.CreateMany,method:a.Create.value,url:this._basePath,data:e,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_readOne(e,t,s,r,i){const n=this._retrieveCachedValues([e]);if(0===n.toRequest.length)0===n.underRequest.length?s(n.results):(n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=i,this._waitingQueue.push(n));else{n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=i,this._waitingQueue.push(n);try{this._cache.add(e,null),n.underRequest.push(e),n.toRequest.splice(n.toRequest.indexOf(e),1)}catch(e){this.logger.error(e)}this._idToRequest.push(e),this.aggregateQueue()}}_readMany(e,t,s,r,i){const n=this._retrieveCachedValues(e);if(0===n.toRequest.length)0===n.underRequest.length?s(n.results):(n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=i,this._waitingQueue.push(n));else{n.onLoadCallback=s,n.onProgressCallback=r,n.onErrorCallback=i,this._waitingQueue.push(n);const e=n.toRequest;let t;for(let s=e.length-1;s>=0;s--){t=e[s];try{this._cache.add(t,null),n.underRequest.push(t),n.toRequest.splice(n.toRequest.indexOf(t),1)}catch(e){this.logger.error(e)}this._idToRequest.push(t)}this.aggregateQueue()}}_readWhere(e,t,s,r,i){this._requestQueue.push({_id:`readWhere_${M.id}`,_timeStart:new Date,_type:$.ReadWhere,method:a.Read.value,url:this._basePath,data:{query:e,projection:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_readAll(e,t,s,r){this._requestQueue.push({_id:`readAll_${M.id}`,_timeStart:new Date,_type:$.ReadAll,method:a.Read.value,url:this._basePath,data:{query:{},projection:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_updateOne(e,t,s,r,i){this._requestQueue.push({_id:`updateOne_${M.id}`,_timeStart:new Date,_type:$.UpdateOne,method:a.Update.value,url:`${this._basePath}/${e}`,data:{update:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_updateMany(e,t,s,r,i){this._requestQueue.push({_id:`updateMany_${M.id}`,_timeStart:new Date,_type:$.UpdateMany,method:a.Update.value,url:this._basePath,data:{ids:e,update:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_updateWhere(e,t,s,r,i){this._requestQueue.push({_id:`updateWhere_${M.id}`,_timeStart:new Date,_type:$.UpdateWhere,method:a.Update.value,url:this._basePath,data:{query:e,update:t},onLoad:s,onProgress:r,onError:i,responseType:this._responseType}),this.processQueue()}_updateAll(e,t,s,r){this._requestQueue.push({_id:`updateAll_${M.id}`,_timeStart:new Date,_type:$.UpdateAll,method:a.Update.value,url:this._basePath,data:{query:{},update:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteOne(e,t,s,r){this._requestQueue.push({_id:`deleteOne_${M.id}`,_timeStart:new Date,_type:$.DeleteOne,method:a.Delete.value,url:`${this._basePath}/${e}`,data:null,onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteMany(e,t,s,r){this._requestQueue.push({_id:`deleteMany_${M.id}`,_timeStart:new Date,_type:$.DeleteMany,method:a.Delete.value,url:this._basePath,data:{ids:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteWhere(e,t,s,r){this._requestQueue.push({_id:`deleteWhere_${M.id}`,_timeStart:new Date,_type:$.DeleteWhere,method:a.Delete.value,url:this._basePath,data:{query:e},onLoad:t,onProgress:s,onError:r,responseType:this._responseType}),this.processQueue()}_deleteAll(e,t,s){this._requestQueue.push({_id:`deleteAll_${M.id}`,_timeStart:new Date,_type:$.DeleteAll,method:a.Delete.value,url:this._basePath,data:{query:{}},onLoad:e,onProgress:t,onError:s,responseType:this._responseType}),this.processQueue()}}q._requestId=0,q._requests={waitingQueue:{},toProcess:{create:{},read:{},update:{},delete:{}},underProcess:{create:{},read:{},update:{},delete:{}},processed:{create:{},read:{},update:{},delete:{}}};const C=t.toEnum({Number:0,String:1,Uuid:2});var D,I=new Uint8Array(16);function P(){if(!D&&!(D="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return D(I)}var x=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var k=[],L=0;L<256;++L)k.push((L+256).toString(16).substr(1));function F(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,s=(k[e[t+0]]+k[e[t+1]]+k[e[t+2]]+k[e[t+3]]+"-"+k[e[t+4]]+k[e[t+5]]+"-"+k[e[t+6]]+k[e[t+7]]+"-"+k[e[t+8]]+k[e[t+9]]+"-"+k[e[t+10]]+k[e[t+11]]+k[e[t+12]]+k[e[t+13]]+k[e[t+14]]+k[e[t+15]]).toLowerCase();if(!function(e){return"string"==typeof e&&x.test(e)}(s))throw TypeError("Stringified UUID is invalid");return s}function W(e,t,s){var r=(e=e||{}).random||(e.rng||P)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){s=s||0;for(var i=0;i<16;++i)t[s+i]=r[i];return t}return F(r)}class V{static isWebAPIMessage=!0;constructor(e){this._id=W(),this.type=e}get id(){return this._id}get type(){return this._type}set type(e){if(s.isNotString(e))throw new ReferenceError("WebAPIMessage type cannot be null or undefined !");if(s.isEmptyString(e))throw new TypeError("WebAPIMessage type cannot be an empty string !");this._type=e}toJSON(){return{id:this.id,type:this.type}}}class Q extends V{static isWebAPIMessageData=!0;constructor(e){super("_data"),this.data=e}toJSON(){const e=this.data===Object(this.data);return{...super.toJSON(),data:e?JSON.stringify(this.data):this.data}}}class j extends V{static isWebAPIMessageError=!0;static isError(e){return e instanceof Error||s.isObject(e)&&(s.isDefined(e.name)||s.isDefined(e.message)||s.isDefined(e.stack))}constructor(e){super("_error"),this.error=e}get error(){return this._error}set error(e){if(s.isNotDefined(e))throw new ReferenceError(`Expect a string, or Error like. But got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);if(s.isString(e))this._error={name:"UnknownError",message:e};else{if(!j.isError(e))throw new TypeError(`Expect a string, or Error like. But got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);this._error={name:e.name,message:e.message,stack:e.stack}}}toJSON(){return{...super.toJSON(),error:this.error}}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */class J extends V{static isWebAPIMessageEvent=!0;constructor(e,t){super("_event"),this.name=e,this.data=t}toJSON(){const e=this.data===Object(this.data);return{...super.toJSON(),name:this.name,data:e?JSON.stringify(this.data):this.data}}}class z extends V{static isWebAPIMessageReady=!0;constructor(e={}){super("_ready");const t={isBind:!1,...e};this.isBind=t.isBind}get isBind(){return this._isBind}set isBind(e){if(s.isNotDefined(e))throw new ReferenceError("WebAPIMessageReady isBind cannot be null or undefined ! Expect a boolean value.");if(s.isNotBoolean(e))throw new TypeError("WebAPIMessageReady isBind expect a boolean value.");this._isBind=e}toJSON(){return{...super.toJSON(),isBind:this.isBind}}}class H extends V{static isWebAPIMessageRequest=!0;constructor(e,t=[]){super("_request"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){if(s.isNotDefined(e))throw new ReferenceError("Expect a string that represent a api method name, but got undefined or null value.");if(s.isNotString(e))throw new TypeError(`Expect a string that represent a api method name, but got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);if(s.isEmptyString(e)||s.isBlankString(e))throw new TypeError("Expect a string that represent a api method name, but got empty or blank string.");this._method=e}get parameters(){return this._parameters}set parameters(e){if(s.isNotArray(e))throw new TypeError(`Expect an array of parameters, but got value of '${typeof e}' type: ${JSON.stringify(e,null,4)}`);this._parameters=e}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}}class G extends V{static isWebApiMessageResponse=!0;constructor(e,t){super("_response"),this.request=e,this.result=t}get request(){return this._request}set request(e){s.isNull(e)||s.isUndefined(e)||(this._request=e)}get result(){return this._result}set result(e){this._result=e}toJSON(){return{...super.toJSON(),request:this.request,result:this.result}}}
/**
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */class K{constructor(e={}){const t={uri:"",allowedMethods:["*"],window:null,messageQueue:[],isReachable:!0,isReady:!1,...e,id:s.isDefined(e.id)?e.id:W()};this._id=t.id,this.uri=t.uri,this.allowedMethods=t.allowedMethods,this.window=t.window,this.isReachable=t.isReachable,this.isReady=t.isReady,this.messageQueue=t.messageQueue}get id(){return this._id}get uri(){return this._uri}set uri(e){if(s.isNotDefined(e))throw new ReferenceError("WebAPIOrigin uri cannot be null or undefined !");if(s.isNotString(e))throw new TypeError(`WebAPIOrigin uri expect to be a string. Got '${typeof e}' !`);if(s.isEmptyString(e))throw new RangeError("WebAPIOrigin uri cannot be an empty string !");this._uri=e}get allowedMethods(){return this._allowedMethods}set allowedMethods(e){if(s.isNotDefined(e))throw new ReferenceError("WebAPIOrigin methods cannot be null or undefined ! Expect an array of method name.");if(s.isNotArray(e))throw new TypeError(`WebAPIOrigin methods expect to be an array of method name (string).Got '${typeof e}' !`);if(s.isEmptyArray(e))throw new RangeError("WebAPIOrigin methods cannot be an empty array ! Expect an array of method name.");this._allowedMethods=e}get window(){return this._window}set window(e){this._window=e}get isReady(){return this._isReady}set isReady(e){if(s.isNotDefined(e))throw new ReferenceError("WebAPIOrigin isReady cannot be null or undefined !");if(s.isNotBoolean(e))throw new TypeError(`WebAPIOrigin isReady expect a Boolean. Got '${typeof e}' !`);this._isReady=e}get isReachable(){return this._isReachable}set isReachable(e){if(s.isNotDefined(e))throw new ReferenceError("WebAPIOrigin isReachable cannot be null or undefined !");if(s.isNotBoolean(e))throw new TypeError(`WebAPIOrigin isReachable expect a Boolean. Got '${typeof e}' !`);this._isReachable=e}get messageQueue(){return this._messageQueue}set messageQueue(e){this._messageQueue=e}setUri(e){return this.uri=e,this}setAllowedMethods(e){return this.allowedMethods=e,this}addAllowedMethod(e){return this.allowedMethods.includes(e)||this.allowedMethods.push(e),this}removeAllowedMethod(e){const t=this.allowedMethods.indexOf(e);return t>=0&&this.allowedMethods.slice(t,e),this}setWindow(e){return this.window=e,this}setReadyState(e){return this.isReady=e,this}setReachableState(e){return this.isReachable=e,this}}class X{static isWorkerMessage=!0;constructor(e){this.type=e}get type(){return this._type}set type(e){this._type=e}toJSON(){return{type:this.type}}}class Y extends X{static isWorkerMessageData=!0;constructor(e,t){super(e),this.buffer=t}toJSON(){return{...super.toJSON(),buffer:this.buffer}}}class Z extends X{static isWorkerMessageError=!0;constructor(e){super("error"),this.message=e.message,this.stack=e.stack}toJSON(){return{...super.toJSON(),message:this.message,stack:this.stack}}}class ee extends X{static isWorkerMessageProgress=!0;constructor(e=0,t=0){super("progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}}return e.AbstractWorker=class{postProgress(e){e.isWorkerMessageProgress?postMessage(e.toJSON()):postMessage(new ee(e.loaded,e.total).toJSON())}postError(e){e.isWorkerMessageError?postMessage(e.toJSON()):postMessage(new Z(e).toJSON())}postData(e,t){if(s.isArray(t))postMessage(new Y(e,t).toJSON(),[...t]);else{if(!s.isArrayBuffer(t))throw new TypeError(`AbstractWorker.postData: Unable to post data of type [${e}].`);postMessage(new Y(e,t).toJSON(),[t])}}onMessage(e){if(s.isNotDefined(e))return this.postError(new Error("Message event cannot be null or undefined !")),!0;const t=e.data;if(s.isNotDefined(t))return this.postError(new Error("Message data cannot be null or undefined !")),!0;const r=t.type;if(s.isNotDefined(r))return this.postError(new Error("Message data type cannot be null or undefined !")),!0;if("methodCall"===t.type){const e=t.method;if(s.isNotDefined(e))return this.postError(new Error('Message of type "methodCall" cannot have null, undefined or empty name !')),!0;if(s.isNotString(e))return this.postError(new Error('Message of type "methodCall" expect name to be a string !')),!0;if(s.isEmptyString(e))return this.postError(new Error('Message of type "methodCall" expect name to be a non empty string !')),!0;const r=t.parameters||[];return s.isNotArray(r)?(this.postError(new Error('Message of type "methodCall" expect parameters to be an array !')),!0):(this._invoke(e,r),!0)}}_invoke(e,t=[]){try{const s=this[e](...t);s&&postMessage({type:e,result:s})}catch(e){this.postError(e)}}},e.ArrayBinaryConverter=A,e.BinaryType=U,e.Byte=_,e.DateBinaryConverter=T,e.DefaultBinarySerializer=S,e.Endianness=p,e.FileFormat=i,e.HttpStatusCode=n,e.HttpVerb=a,e.Keys=o,e.MimeType=u,e.Mouse=l,e.NullBinaryConverter=w,e.NumberBinaryConverter=v,e.ObjectBinaryConverter=N,e.RegExBinaryConverter=O,e.ResponseType=h,e.StringBinaryConverter=E,e.TAbstractFactory=c,e.TBinaryConverter=g,e.TBinaryReader=y,e.TBinarySerializer=B,e.TBinaryWriter=R,e.TCloningFactory=class extends c{constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),this.get(e).clone(...t)}}
/**
	 * @class
	 * @classdesc The TInstancingFactory is a kind a factory that performe instanciation based on registred constructor.
	 * @extends TAbstractFactory
	 *
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 */,e.TDataBaseManager=q,e.TIdFactory=class{constructor(e=C.Number,t=null){this.type=e,this.base=t,this._counter=0}get type(){return this._type}set type(e){if(s.isNull(e))throw new Error(`Type cannot be null ! Expect an value from TIdFactoryType enum: ${C.types()}`);if(s.isUndefined(e))throw new Error(`Type cannot be undefined ! Expect an value from TIdFactoryType enum: ${C.types()}`);if(!C.includes(e))throw new Error(`Invalide type ! Expect an value from TIdFactoryType enum: ${C.types()}`);this._type=e}get base(){return this._base}set base(e){if(s.isUndefined(e))throw new Error("Base cannot be undefined ! Expect an instance of Object3D.");if(this._type===C.Number&&s.isNotNumber(e))throw new Error("Invalide Base ! It does not match the type.");if(this._type===C.String&&s.isNotString(e))throw new Error("Invalide Base ! It does not match the type.");this._base=e}setType(e){return this.type=e,this}setBase(e){return this.base=e,this}createId(){return this._base+this._counter++}},e.TIdFactoryType=C,e.TInstancingFactory=class extends c{constructor(e={}){super({...e})}create(e,...t){return super.create(e,...t),new this.get(e)(...t)}},e.TKeyboardController=f,e.TMouseController=
/**
	 * @class
	 * @classdesc TMouseController allow single source of thruth for mouse state checking
	 * @author [Tristan Valcke]{@link https://github.com/Itee}
	 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
	 * @example
	 * (1) create a global variable:
	 *      var keyboard = new TKeyboardController();
	 * (2) during main loop:
	 *       keyboard.update();
	 * (3) check state of keys:
	 *       keyboard.down("A")    -- true for one update cycle after key is pressed
	 *       keyboard.pressed("A") -- true as long as key is being pressed
	 *       keyboard.up("A")      -- true for one update cycle after key is released
	 *
	 *  See TKeyboardController.k object data below for names of keys whose state can be polled
	 */
class{constructor(){}},e.TStore=d,e.UndefinedBinaryConverter=b,e.WebAPI=class{constructor(e={}){const t={logger:r.DefaultLogger,allowedOrigins:[],requestTimeout:2e3,methods:this,broadcastReadyOnInit:!0,...e};this._localOriginUri=window.location.origin,this._awaitingRequest=new Map,this._eventListeners={},window.addEventListener("message",this._onMessage.bind(this),!1),this.logger=t.logger,this.allowedOrigins=t.allowedOrigins,this.requestTimeout=t.requestTimeout,this.methods=t.methods,t.broadcastReadyOnInit&&this._broadcastReadyMessage()}get logger(){return this._logger}set logger(e){if(s.isNull(e))throw new ReferenceError(`[${this._localOriginUri}]: The logger cannot be null, expect a TLogger.`);if(s.isUndefined(e))throw new ReferenceError(`[${this._localOriginUri}]: The logger cannot be undefined, expect a TLogger.`);if(!e.isLogger)throw new ReferenceError(`[${this._localOriginUri}]: The logger cannot be undefined, expect a TLogger.`);this._logger=e}get allowedOrigins(){return this._allowedOrigins}set allowedOrigins(e){this._allowedOrigins=[];const s=t.toArray(e);if(s.includes("*"))return this.logger.warn(`[${this._localOriginUri}]: This webApi is allowed for all origin and could lead to security concerne !`),void this._allowedOrigins.push("*");for(let e of s){const t=new K({id:e.id,uri:e.uri,methods:e.methods,window:this._getOriginWindow(e.uri)});this._allowedOrigins.push(t)}}get requestTimeout(){return this._requestTimeout}set requestTimeout(e){if(s.isNull(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout cannot be null, expect to be 0 or a positive number.`);if(s.isUndefined(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout cannot be undefined, expect to be 0 or a positive number.`);if(s.isNotNumber(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout expect to be 0 or a positive number.`);if(s.isNumberNegative(e)&&!s.isZero(e))throw new ReferenceError(`[${this._localOriginUri}]: The request timeout expect to be 0 or a positive number.`);this._requestTimeout=e}get methods(){return this._methods}set methods(e){if(s.isNull(e))throw new ReferenceError(`[${this._localOriginUri}]: The methods cannot be null, expect any keyed collection of function.`);if(s.isUndefined(e))throw new ReferenceError(`[${this._localOriginUri}]: The methods cannot be undefined, expect any keyed collection of function.`);this._methods=e}setLogger(e){return this.logger=e,this}setAllowedOrigins(e){return this.allowedOrigins=e,this}setRequestTimeout(e){return this.requestTimeout=e,this}setMethods(e){return this.methods=e,this}addEventListener(e,t){s.isNotDefined(this._eventListeners[e])&&(this._eventListeners[e]=[]),this._eventListeners[e].push(t)}removeListener(e,t){if(s.isNotDefined(this._eventListeners[e]))return;const r=this._eventListeners[e].indexOf(t);r>-1&&this._eventListeners[e].splice(r,1)}_isInIframe(){try{return window.self!==window.top}catch(e){return!0}}_isNotAllowedForAllOrigins(){return!this._allowedOrigins.includes("*")}_isNotAllowedOrigin(e){return!this._allowedOrigins.filter(e=>"*"!==e).map(e=>e.uri).includes(e)}_isSameOrigin(e){return this._localOriginUri===e}_isNotAllowedForAllMethods(e){return-1===e.allowedMethods.indexOf("*")}_isNotAllowedMethod(e,t){return-1===e.allowedMethods.indexOf(t)}_methodNotExist(e){return s.isNotDefined(this.methods[e])}_getAllowedOriginBy(e,t){return this.allowedOrigins.find(s=>s[e]===t)}_getOriginWindow(e){let t;if(this._isInIframe())t=window.parent;else{const r=document.getElementsByTagName("iframe"),i=Array.from(r).find(t=>t.src.includes(e));s.isNotDefined(i)?(this.logger.warn(`[${this._localOriginUri}]: Unable to find iframe element for [${e}] URI !`),t=null):t=i.contentWindow}return t}_processMessageQueueOf(e){const t=e.messageQueue;for(let s=t.length-1;s>=0;s--)this.postMessageTo(e.id,t.shift())}_broadcastReadyMessage(){const e=new z;let t=250;const r=()=>{const i=this.allowedOrigins.filter(e=>!e.isReady&&e.isReachable);if(!s.isEmptyArray(i)){for(let t of i)this.postReadyTo(t.id,e);t+=t,setTimeout(r,t)}};r()}async _onMessage(e){if(this._isNotAllowedForAllOrigins()&&this._isNotAllowedOrigin(e.origin))return void this.logger.warn(`[${this._localOriginUri}]: An unallowed origin [${e.origin}] try to access the web api.`);if(this._isSameOrigin(e.origin))return void this.logger.warn(`[${this._localOriginUri}]: A local origin try to access the web api... \n                or... Am i talking to myself  ?\n                Said i (${s.isString(e.data)?e.data:JSON.stringify(e.data)}) ?\n                Hummm... Ehhooo ! Who's there ?\n            `);let t=this._getAllowedOriginBy("uri",e.origin);s.isNotDefined(t)?(t=new K({uri:e.origin,window:e.source}),this.allowedOrigins.push(t)):s.isNull(t.window)&&(t.window=e.source);const r=e.data,i=s.isObject(r)?r:JSON.parse(r);s.isNotDefined(i)?this.logger.error(`[${this._localOriginUri}]: Recieve null or undefined message from [${t.uri}] ! Expect a json object.`):await this._dispatchMessageFrom(t,i)}async _dispatchMessageFrom(e,t){switch(this.logger.log(`[${this._localOriginUri}]: Recieve message of type '${t.type}' from [${e.uri}].`),t.type){case"_ready":this._onReadyFrom(e,t);break;case"_request":await this._onRequestFrom(e,t);break;case"_response":this._onResponseFrom(e,t);break;case"_data":this.onDataFrom(e,t);break;case"_event":this.onEventFrom(e,t);break;case"_error":this.onErrorFrom(e,t);break;default:this.onMessageFrom(e,t)}}_onReadyFrom(e,t){if(!e.isReady&&(e.isReady=!0,!t.isBind)){const t=new z({isBind:!0});this.postMessageTo(e.id,t,!0)}this._processMessageQueueOf(e)}async _onRequestFrom(e,t){let s;const r=t.method,i=t.parameters;if(this._isNotAllowedForAllMethods(e)&&this._isNotAllowedMethod(e,r))this.logger.error(`[${this._localOriginUri}]: Origin [${e.uri}] try to access an unallowed method named '${r}'.`),s=new j(new RangeError(`Trying to access an unallowed method named '${r}'.`));else if(this._methodNotExist(r))this.logger.error(`[${this._localOriginUri}]: Origin [${e.uri}] try to access an unexisting method named '${r}'.`),s=new j(new RangeError(`Trying to access an unexisting method named '${r}'.`));else try{const e=await this.methods[r](...i);s=new Q(e)}catch(e){s=new j(e)}this.postResponseTo(e.id,t,s)}_onResponseFrom(e,t){const r=t.request.id;if(!this._awaitingRequest.has(r))return;const i=this._awaitingRequest.get(r);this._awaitingRequest.delete(r),clearTimeout(i.timeoutId);const n=t.result;s.isDefined(n)?"_error"===n.type?i.reject(n.error):"_data"===n.type?i.resolve(n.data):i.resolve(n):i.resolve()}onErrorFrom(e,t){this.logger.error(`[${this._localOriginUri}]: the origin [${e.uri}] send error => ${JSON.stringify(t.error,null,4)}. Need you to reimplement this method ?`)}onDataFrom(e,t){this.logger.log(`[${this._localOriginUri}]: the origin [${e.uri}] send data => ${JSON.stringify(t.data,null,4)}. Need you to reimplement this method ?`)}onMessageFrom(e,t){this.logger.log(`[${this._localOriginUri}]: the origin [${e.uri}] send custom message => ${JSON.stringify(t,null,4)}. Need you to reimplement this method ?`)}onEventFrom(e,t){const s=this._eventListeners[t.name];for(const e of s)e(t.data)}postReadyTo(e,t){const s=t&&t.constructor.isWebAPIMessageReady?t:new z;this.postMessageTo(e,s,!0)}postRequestTo(e,t,...s){const r=t&&t.constructor.isWebAPIMessageRequest?t:new H(t,s);return new Promise((t,s)=>{try{this._awaitingRequest.set(r.id,{request:r,resolve:t,reject:s,timeoutId:setTimeout(()=>{this._awaitingRequest.delete(r.id),s(new Error(`Request timeout for ${JSON.stringify(r,null,4)}`))},this.requestTimeout)}),this.postMessageTo(e,r)}catch(e){s(e)}})}postResponseTo(e,t,s){const r=s&&s.constructor.isWebAPIMessageResponse?s:new G(t,s);this.postMessageTo(e,r)}postErrorTo(e,t){const s=t&&t.constructor.isWebAPIMessageError?t:new j(t);this.postMessageTo(e,s)}postDataTo(e,t){const s=t&&t.constructor.isWebAPIMessageData?t:new Q(t);this.postMessageTo(e,s)}postMessageTo(e,t,r=!1){if(s.isNotDefined(e))throw new ReferenceError(`[${this._localOriginUri}]: Unable to post message to null or undefined origin id !`);if(s.isNotDefined(t))throw new ReferenceError(`[${this._localOriginUri}]: Unable to post null or undefined message !`);const i=this._getAllowedOriginBy("id",e);if(s.isNotDefined(i))throw new ReferenceError(`[${this._localOriginUri}]: Unable to retrieved origin with id: ${e}`);try{r||i.isReady?r&&!i.window?(this.logger.error(`[${this._localOriginUri}]: Origin [${i.uri}] is unreachable !`),i.messageQueue.push(t)):(this.logger.log(`[${this._localOriginUri}]: Send message of type '${t.type}' to [${i.uri}]`),i.window.postMessage(JSON.stringify(t),i.uri)):(this.logger.warn(`[${this._localOriginUri}]: Origin [${i.uri}] is not ready yet !`),i.messageQueue.push(t))}catch(e){this.logger.error(e)}}postEvent(e="DefaultEventName",t){const s=t&&t.constructor.isWebAPIMessageEvent?t:new J(e,t),r=this._allowedOrigins.filter(e=>"*"!==e);for(let e=0;e<r.length;e++){const t=r[e].id;this.postMessageTo(t,s)}}},e.WebAPIMessage=V,e.WebAPIMessageData=Q,e.WebAPIMessageError=j,e.WebAPIMessageProgress=class extends V{static isWebAPIMessageProgress=!0;constructor(e=0,t=0){super("_progress"),this.lengthComputable=!1,this.loaded=e,this.total=t}get loaded(){return this._loaded}set loaded(e){this._loaded=e,this._checkIfLengthComputable()}get total(){return this._total}set total(e){this._total=e,this._checkIfLengthComputable()}_checkIfLengthComputable(){this.lengthComputable=!1,this._total>0&&this._total<Number.MAX_SAFE_INTEGER&&this._loaded>=0&&this._loaded<Number.MAX_SAFE_INTEGER&&(this.lengthComputable=!0)}toJSON(){return{...super.toJSON(),lengthComputable:this.lengthComputable,loaded:this.loaded,total:this.total}}},e.WebAPIMessageReady=z,e.WebAPIMessageRequest=H,e.WebAPIMessageResponse=G,e.WorkerMessage=X,e.WorkerMessageData=Y,e.WorkerMessageError=Z,e.WorkerMessageMethodCall=class extends X{static isWorkerMessageMethodCall=!0;constructor(e,t=[]){super("methodCall"),this.method=e,this.parameters=t}get method(){return this._method}set method(e){s.isNull(e)||s.isUndefined(e)||s.isNotString(e)||(this._method=e)}get parameters(){return this._parameters}set parameters(e){s.isNotArray(e)||(this._parameters=e)}toJSON(){return{...super.toJSON(),method:this.method,parameters:this.parameters}}},e.WorkerMessageProgress=ee,Object.defineProperty(e,"__esModule",{value:!0}),e}({},Itee.Utils,Itee.Validators,Itee.Core);
